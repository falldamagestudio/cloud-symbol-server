// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// StoreUpload is an object representing the database table.
type StoreUpload struct {
	UploadID    int       `boil:"upload_id" json:"upload_id" toml:"upload_id" yaml:"upload_id"`
	StoreID     null.Int  `boil:"store_id" json:"store_id,omitempty" toml:"store_id" yaml:"store_id,omitempty"`
	Description string    `boil:"description" json:"description" toml:"description" yaml:"description"`
	Build       string    `boil:"build" json:"build" toml:"build" yaml:"build"`
	Timestamp   time.Time `boil:"timestamp" json:"timestamp" toml:"timestamp" yaml:"timestamp"`
	Status      string    `boil:"status" json:"status" toml:"status" yaml:"status"`

	R *storeUploadR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L storeUploadL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var StoreUploadColumns = struct {
	UploadID    string
	StoreID     string
	Description string
	Build       string
	Timestamp   string
	Status      string
}{
	UploadID:    "upload_id",
	StoreID:     "store_id",
	Description: "description",
	Build:       "build",
	Timestamp:   "timestamp",
	Status:      "status",
}

var StoreUploadTableColumns = struct {
	UploadID    string
	StoreID     string
	Description string
	Build       string
	Timestamp   string
	Status      string
}{
	UploadID:    "store_uploads.upload_id",
	StoreID:     "store_uploads.store_id",
	Description: "store_uploads.description",
	Build:       "store_uploads.build",
	Timestamp:   "store_uploads.timestamp",
	Status:      "store_uploads.status",
}

// Generated where

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var StoreUploadWhere = struct {
	UploadID    whereHelperint
	StoreID     whereHelpernull_Int
	Description whereHelperstring
	Build       whereHelperstring
	Timestamp   whereHelpertime_Time
	Status      whereHelperstring
}{
	UploadID:    whereHelperint{field: "\"cloud_symbol_server\".\"store_uploads\".\"upload_id\""},
	StoreID:     whereHelpernull_Int{field: "\"cloud_symbol_server\".\"store_uploads\".\"store_id\""},
	Description: whereHelperstring{field: "\"cloud_symbol_server\".\"store_uploads\".\"description\""},
	Build:       whereHelperstring{field: "\"cloud_symbol_server\".\"store_uploads\".\"build\""},
	Timestamp:   whereHelpertime_Time{field: "\"cloud_symbol_server\".\"store_uploads\".\"timestamp\""},
	Status:      whereHelperstring{field: "\"cloud_symbol_server\".\"store_uploads\".\"status\""},
}

// StoreUploadRels is where relationship names are stored.
var StoreUploadRels = struct {
	Store                  string
	UploadStoreUploadFiles string
}{
	Store:                  "Store",
	UploadStoreUploadFiles: "UploadStoreUploadFiles",
}

// storeUploadR is where relationships are stored.
type storeUploadR struct {
	Store                  *Store               `boil:"Store" json:"Store" toml:"Store" yaml:"Store"`
	UploadStoreUploadFiles StoreUploadFileSlice `boil:"UploadStoreUploadFiles" json:"UploadStoreUploadFiles" toml:"UploadStoreUploadFiles" yaml:"UploadStoreUploadFiles"`
}

// NewStruct creates a new relationship struct
func (*storeUploadR) NewStruct() *storeUploadR {
	return &storeUploadR{}
}

func (r *storeUploadR) GetStore() *Store {
	if r == nil {
		return nil
	}
	return r.Store
}

func (r *storeUploadR) GetUploadStoreUploadFiles() StoreUploadFileSlice {
	if r == nil {
		return nil
	}
	return r.UploadStoreUploadFiles
}

// storeUploadL is where Load methods for each relationship are stored.
type storeUploadL struct{}

var (
	storeUploadAllColumns            = []string{"upload_id", "store_id", "description", "build", "timestamp", "status"}
	storeUploadColumnsWithoutDefault = []string{"description", "build", "timestamp", "status"}
	storeUploadColumnsWithDefault    = []string{"upload_id", "store_id"}
	storeUploadPrimaryKeyColumns     = []string{"upload_id"}
	storeUploadGeneratedColumns      = []string{"upload_id"}
)

type (
	// StoreUploadSlice is an alias for a slice of pointers to StoreUpload.
	// This should almost always be used instead of []StoreUpload.
	StoreUploadSlice []*StoreUpload
	// StoreUploadHook is the signature for custom StoreUpload hook methods
	StoreUploadHook func(context.Context, boil.ContextExecutor, *StoreUpload) error

	storeUploadQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	storeUploadType                 = reflect.TypeOf(&StoreUpload{})
	storeUploadMapping              = queries.MakeStructMapping(storeUploadType)
	storeUploadPrimaryKeyMapping, _ = queries.BindMapping(storeUploadType, storeUploadMapping, storeUploadPrimaryKeyColumns)
	storeUploadInsertCacheMut       sync.RWMutex
	storeUploadInsertCache          = make(map[string]insertCache)
	storeUploadUpdateCacheMut       sync.RWMutex
	storeUploadUpdateCache          = make(map[string]updateCache)
	storeUploadUpsertCacheMut       sync.RWMutex
	storeUploadUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var storeUploadAfterSelectHooks []StoreUploadHook

var storeUploadBeforeInsertHooks []StoreUploadHook
var storeUploadAfterInsertHooks []StoreUploadHook

var storeUploadBeforeUpdateHooks []StoreUploadHook
var storeUploadAfterUpdateHooks []StoreUploadHook

var storeUploadBeforeDeleteHooks []StoreUploadHook
var storeUploadAfterDeleteHooks []StoreUploadHook

var storeUploadBeforeUpsertHooks []StoreUploadHook
var storeUploadAfterUpsertHooks []StoreUploadHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *StoreUpload) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range storeUploadAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *StoreUpload) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range storeUploadBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *StoreUpload) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range storeUploadAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *StoreUpload) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range storeUploadBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *StoreUpload) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range storeUploadAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *StoreUpload) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range storeUploadBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *StoreUpload) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range storeUploadAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *StoreUpload) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range storeUploadBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *StoreUpload) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range storeUploadAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddStoreUploadHook registers your hook function for all future operations.
func AddStoreUploadHook(hookPoint boil.HookPoint, storeUploadHook StoreUploadHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		storeUploadAfterSelectHooks = append(storeUploadAfterSelectHooks, storeUploadHook)
	case boil.BeforeInsertHook:
		storeUploadBeforeInsertHooks = append(storeUploadBeforeInsertHooks, storeUploadHook)
	case boil.AfterInsertHook:
		storeUploadAfterInsertHooks = append(storeUploadAfterInsertHooks, storeUploadHook)
	case boil.BeforeUpdateHook:
		storeUploadBeforeUpdateHooks = append(storeUploadBeforeUpdateHooks, storeUploadHook)
	case boil.AfterUpdateHook:
		storeUploadAfterUpdateHooks = append(storeUploadAfterUpdateHooks, storeUploadHook)
	case boil.BeforeDeleteHook:
		storeUploadBeforeDeleteHooks = append(storeUploadBeforeDeleteHooks, storeUploadHook)
	case boil.AfterDeleteHook:
		storeUploadAfterDeleteHooks = append(storeUploadAfterDeleteHooks, storeUploadHook)
	case boil.BeforeUpsertHook:
		storeUploadBeforeUpsertHooks = append(storeUploadBeforeUpsertHooks, storeUploadHook)
	case boil.AfterUpsertHook:
		storeUploadAfterUpsertHooks = append(storeUploadAfterUpsertHooks, storeUploadHook)
	}
}

// One returns a single storeUpload record from the query.
func (q storeUploadQuery) One(ctx context.Context, exec boil.ContextExecutor) (*StoreUpload, error) {
	o := &StoreUpload{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for store_uploads")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all StoreUpload records from the query.
func (q storeUploadQuery) All(ctx context.Context, exec boil.ContextExecutor) (StoreUploadSlice, error) {
	var o []*StoreUpload

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to StoreUpload slice")
	}

	if len(storeUploadAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all StoreUpload records in the query.
func (q storeUploadQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count store_uploads rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q storeUploadQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if store_uploads exists")
	}

	return count > 0, nil
}

// Store pointed to by the foreign key.
func (o *StoreUpload) Store(mods ...qm.QueryMod) storeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"store_id\" = ?", o.StoreID),
	}

	queryMods = append(queryMods, mods...)

	return Stores(queryMods...)
}

// UploadStoreUploadFiles retrieves all the store_upload_file's StoreUploadFiles with an executor via upload_id column.
func (o *StoreUpload) UploadStoreUploadFiles(mods ...qm.QueryMod) storeUploadFileQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"cloud_symbol_server\".\"store_upload_files\".\"upload_id\"=?", o.UploadID),
	)

	return StoreUploadFiles(queryMods...)
}

// LoadStore allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (storeUploadL) LoadStore(ctx context.Context, e boil.ContextExecutor, singular bool, maybeStoreUpload interface{}, mods queries.Applicator) error {
	var slice []*StoreUpload
	var object *StoreUpload

	if singular {
		var ok bool
		object, ok = maybeStoreUpload.(*StoreUpload)
		if !ok {
			object = new(StoreUpload)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeStoreUpload)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeStoreUpload))
			}
		}
	} else {
		s, ok := maybeStoreUpload.(*[]*StoreUpload)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeStoreUpload)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeStoreUpload))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &storeUploadR{}
		}
		if !queries.IsNil(object.StoreID) {
			args = append(args, object.StoreID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &storeUploadR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.StoreID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.StoreID) {
				args = append(args, obj.StoreID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`cloud_symbol_server.stores`),
		qm.WhereIn(`cloud_symbol_server.stores.store_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Store")
	}

	var resultSlice []*Store
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Store")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for stores")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for stores")
	}

	if len(storeUploadAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Store = foreign
		if foreign.R == nil {
			foreign.R = &storeR{}
		}
		foreign.R.StoreUploads = append(foreign.R.StoreUploads, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.StoreID, foreign.StoreID) {
				local.R.Store = foreign
				if foreign.R == nil {
					foreign.R = &storeR{}
				}
				foreign.R.StoreUploads = append(foreign.R.StoreUploads, local)
				break
			}
		}
	}

	return nil
}

// LoadUploadStoreUploadFiles allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (storeUploadL) LoadUploadStoreUploadFiles(ctx context.Context, e boil.ContextExecutor, singular bool, maybeStoreUpload interface{}, mods queries.Applicator) error {
	var slice []*StoreUpload
	var object *StoreUpload

	if singular {
		var ok bool
		object, ok = maybeStoreUpload.(*StoreUpload)
		if !ok {
			object = new(StoreUpload)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeStoreUpload)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeStoreUpload))
			}
		}
	} else {
		s, ok := maybeStoreUpload.(*[]*StoreUpload)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeStoreUpload)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeStoreUpload))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &storeUploadR{}
		}
		args = append(args, object.UploadID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &storeUploadR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.UploadID) {
					continue Outer
				}
			}

			args = append(args, obj.UploadID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`cloud_symbol_server.store_upload_files`),
		qm.WhereIn(`cloud_symbol_server.store_upload_files.upload_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load store_upload_files")
	}

	var resultSlice []*StoreUploadFile
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice store_upload_files")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on store_upload_files")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for store_upload_files")
	}

	if len(storeUploadFileAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.UploadStoreUploadFiles = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &storeUploadFileR{}
			}
			foreign.R.Upload = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.UploadID, foreign.UploadID) {
				local.R.UploadStoreUploadFiles = append(local.R.UploadStoreUploadFiles, foreign)
				if foreign.R == nil {
					foreign.R = &storeUploadFileR{}
				}
				foreign.R.Upload = local
				break
			}
		}
	}

	return nil
}

// SetStore of the storeUpload to the related item.
// Sets o.R.Store to related.
// Adds o to related.R.StoreUploads.
func (o *StoreUpload) SetStore(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Store) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"cloud_symbol_server\".\"store_uploads\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"store_id"}),
		strmangle.WhereClause("\"", "\"", 2, storeUploadPrimaryKeyColumns),
	)
	values := []interface{}{related.StoreID, o.UploadID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.StoreID, related.StoreID)
	if o.R == nil {
		o.R = &storeUploadR{
			Store: related,
		}
	} else {
		o.R.Store = related
	}

	if related.R == nil {
		related.R = &storeR{
			StoreUploads: StoreUploadSlice{o},
		}
	} else {
		related.R.StoreUploads = append(related.R.StoreUploads, o)
	}

	return nil
}

// RemoveStore relationship.
// Sets o.R.Store to nil.
// Removes o from all passed in related items' relationships struct.
func (o *StoreUpload) RemoveStore(ctx context.Context, exec boil.ContextExecutor, related *Store) error {
	var err error

	queries.SetScanner(&o.StoreID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("store_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Store = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.StoreUploads {
		if queries.Equal(o.StoreID, ri.StoreID) {
			continue
		}

		ln := len(related.R.StoreUploads)
		if ln > 1 && i < ln-1 {
			related.R.StoreUploads[i] = related.R.StoreUploads[ln-1]
		}
		related.R.StoreUploads = related.R.StoreUploads[:ln-1]
		break
	}
	return nil
}

// AddUploadStoreUploadFiles adds the given related objects to the existing relationships
// of the store_upload, optionally inserting them as new records.
// Appends related to o.R.UploadStoreUploadFiles.
// Sets related.R.Upload appropriately.
func (o *StoreUpload) AddUploadStoreUploadFiles(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*StoreUploadFile) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.UploadID, o.UploadID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"cloud_symbol_server\".\"store_upload_files\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"upload_id"}),
				strmangle.WhereClause("\"", "\"", 2, storeUploadFilePrimaryKeyColumns),
			)
			values := []interface{}{o.UploadID, rel.FileID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.UploadID, o.UploadID)
		}
	}

	if o.R == nil {
		o.R = &storeUploadR{
			UploadStoreUploadFiles: related,
		}
	} else {
		o.R.UploadStoreUploadFiles = append(o.R.UploadStoreUploadFiles, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &storeUploadFileR{
				Upload: o,
			}
		} else {
			rel.R.Upload = o
		}
	}
	return nil
}

// SetUploadStoreUploadFiles removes all previously related items of the
// store_upload replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Upload's UploadStoreUploadFiles accordingly.
// Replaces o.R.UploadStoreUploadFiles with related.
// Sets related.R.Upload's UploadStoreUploadFiles accordingly.
func (o *StoreUpload) SetUploadStoreUploadFiles(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*StoreUploadFile) error {
	query := "update \"cloud_symbol_server\".\"store_upload_files\" set \"upload_id\" = null where \"upload_id\" = $1"
	values := []interface{}{o.UploadID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.UploadStoreUploadFiles {
			queries.SetScanner(&rel.UploadID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Upload = nil
		}
		o.R.UploadStoreUploadFiles = nil
	}

	return o.AddUploadStoreUploadFiles(ctx, exec, insert, related...)
}

// RemoveUploadStoreUploadFiles relationships from objects passed in.
// Removes related items from R.UploadStoreUploadFiles (uses pointer comparison, removal does not keep order)
// Sets related.R.Upload.
func (o *StoreUpload) RemoveUploadStoreUploadFiles(ctx context.Context, exec boil.ContextExecutor, related ...*StoreUploadFile) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.UploadID, nil)
		if rel.R != nil {
			rel.R.Upload = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("upload_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.UploadStoreUploadFiles {
			if rel != ri {
				continue
			}

			ln := len(o.R.UploadStoreUploadFiles)
			if ln > 1 && i < ln-1 {
				o.R.UploadStoreUploadFiles[i] = o.R.UploadStoreUploadFiles[ln-1]
			}
			o.R.UploadStoreUploadFiles = o.R.UploadStoreUploadFiles[:ln-1]
			break
		}
	}

	return nil
}

// StoreUploads retrieves all the records using an executor.
func StoreUploads(mods ...qm.QueryMod) storeUploadQuery {
	mods = append(mods, qm.From("\"cloud_symbol_server\".\"store_uploads\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"cloud_symbol_server\".\"store_uploads\".*"})
	}

	return storeUploadQuery{q}
}

// FindStoreUpload retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindStoreUpload(ctx context.Context, exec boil.ContextExecutor, uploadID int, selectCols ...string) (*StoreUpload, error) {
	storeUploadObj := &StoreUpload{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"cloud_symbol_server\".\"store_uploads\" where \"upload_id\"=$1", sel,
	)

	q := queries.Raw(query, uploadID)

	err := q.Bind(ctx, exec, storeUploadObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from store_uploads")
	}

	if err = storeUploadObj.doAfterSelectHooks(ctx, exec); err != nil {
		return storeUploadObj, err
	}

	return storeUploadObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *StoreUpload) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no store_uploads provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(storeUploadColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	storeUploadInsertCacheMut.RLock()
	cache, cached := storeUploadInsertCache[key]
	storeUploadInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			storeUploadAllColumns,
			storeUploadColumnsWithDefault,
			storeUploadColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, storeUploadGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(storeUploadType, storeUploadMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(storeUploadType, storeUploadMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"cloud_symbol_server\".\"store_uploads\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"cloud_symbol_server\".\"store_uploads\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into store_uploads")
	}

	if !cached {
		storeUploadInsertCacheMut.Lock()
		storeUploadInsertCache[key] = cache
		storeUploadInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the StoreUpload.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *StoreUpload) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	storeUploadUpdateCacheMut.RLock()
	cache, cached := storeUploadUpdateCache[key]
	storeUploadUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			storeUploadAllColumns,
			storeUploadPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, storeUploadGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update store_uploads, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"cloud_symbol_server\".\"store_uploads\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, storeUploadPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(storeUploadType, storeUploadMapping, append(wl, storeUploadPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update store_uploads row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for store_uploads")
	}

	if !cached {
		storeUploadUpdateCacheMut.Lock()
		storeUploadUpdateCache[key] = cache
		storeUploadUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q storeUploadQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for store_uploads")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for store_uploads")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o StoreUploadSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), storeUploadPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"cloud_symbol_server\".\"store_uploads\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, storeUploadPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in storeUpload slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all storeUpload")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *StoreUpload) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no store_uploads provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(storeUploadColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	storeUploadUpsertCacheMut.RLock()
	cache, cached := storeUploadUpsertCache[key]
	storeUploadUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			storeUploadAllColumns,
			storeUploadColumnsWithDefault,
			storeUploadColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			storeUploadAllColumns,
			storeUploadPrimaryKeyColumns,
		)

		insert = strmangle.SetComplement(insert, storeUploadGeneratedColumns)
		update = strmangle.SetComplement(update, storeUploadGeneratedColumns)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert store_uploads, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(storeUploadPrimaryKeyColumns))
			copy(conflict, storeUploadPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"cloud_symbol_server\".\"store_uploads\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(storeUploadType, storeUploadMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(storeUploadType, storeUploadMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert store_uploads")
	}

	if !cached {
		storeUploadUpsertCacheMut.Lock()
		storeUploadUpsertCache[key] = cache
		storeUploadUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single StoreUpload record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *StoreUpload) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no StoreUpload provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), storeUploadPrimaryKeyMapping)
	sql := "DELETE FROM \"cloud_symbol_server\".\"store_uploads\" WHERE \"upload_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from store_uploads")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for store_uploads")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q storeUploadQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no storeUploadQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from store_uploads")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for store_uploads")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o StoreUploadSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(storeUploadBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), storeUploadPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"cloud_symbol_server\".\"store_uploads\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, storeUploadPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from storeUpload slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for store_uploads")
	}

	if len(storeUploadAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *StoreUpload) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindStoreUpload(ctx, exec, o.UploadID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *StoreUploadSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := StoreUploadSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), storeUploadPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"cloud_symbol_server\".\"store_uploads\".* FROM \"cloud_symbol_server\".\"store_uploads\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, storeUploadPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in StoreUploadSlice")
	}

	*o = slice

	return nil
}

// StoreUploadExists checks if the StoreUpload row exists.
func StoreUploadExists(ctx context.Context, exec boil.ContextExecutor, uploadID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"cloud_symbol_server\".\"store_uploads\" where \"upload_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, uploadID)
	}
	row := exec.QueryRowContext(ctx, sql, uploadID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if store_uploads exists")
	}

	return exists, nil
}
