// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Upload is an object representing the database table.
type Upload struct {
	UploadID    int       `boil:"upload_id" json:"upload_id" toml:"upload_id" yaml:"upload_id"`
	StoreID     null.Int  `boil:"store_id" json:"store_id,omitempty" toml:"store_id" yaml:"store_id,omitempty"`
	Description string    `boil:"description" json:"description" toml:"description" yaml:"description"`
	Build       string    `boil:"build" json:"build" toml:"build" yaml:"build"`
	Timestamp   time.Time `boil:"timestamp" json:"timestamp" toml:"timestamp" yaml:"timestamp"`
	Status      string    `boil:"status" json:"status" toml:"status" yaml:"status"`

	R *uploadR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L uploadL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UploadColumns = struct {
	UploadID    string
	StoreID     string
	Description string
	Build       string
	Timestamp   string
	Status      string
}{
	UploadID:    "upload_id",
	StoreID:     "store_id",
	Description: "description",
	Build:       "build",
	Timestamp:   "timestamp",
	Status:      "status",
}

var UploadTableColumns = struct {
	UploadID    string
	StoreID     string
	Description string
	Build       string
	Timestamp   string
	Status      string
}{
	UploadID:    "uploads.upload_id",
	StoreID:     "uploads.store_id",
	Description: "uploads.description",
	Build:       "uploads.build",
	Timestamp:   "uploads.timestamp",
	Status:      "uploads.status",
}

// Generated where

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var UploadWhere = struct {
	UploadID    whereHelperint
	StoreID     whereHelpernull_Int
	Description whereHelperstring
	Build       whereHelperstring
	Timestamp   whereHelpertime_Time
	Status      whereHelperstring
}{
	UploadID:    whereHelperint{field: "\"cloud_symbol_server\".\"uploads\".\"upload_id\""},
	StoreID:     whereHelpernull_Int{field: "\"cloud_symbol_server\".\"uploads\".\"store_id\""},
	Description: whereHelperstring{field: "\"cloud_symbol_server\".\"uploads\".\"description\""},
	Build:       whereHelperstring{field: "\"cloud_symbol_server\".\"uploads\".\"build\""},
	Timestamp:   whereHelpertime_Time{field: "\"cloud_symbol_server\".\"uploads\".\"timestamp\""},
	Status:      whereHelperstring{field: "\"cloud_symbol_server\".\"uploads\".\"status\""},
}

// UploadRels is where relationship names are stored.
var UploadRels = struct {
	Store string
	Files string
}{
	Store: "Store",
	Files: "Files",
}

// uploadR is where relationships are stored.
type uploadR struct {
	Store *Store    `boil:"Store" json:"Store" toml:"Store" yaml:"Store"`
	Files FileSlice `boil:"Files" json:"Files" toml:"Files" yaml:"Files"`
}

// NewStruct creates a new relationship struct
func (*uploadR) NewStruct() *uploadR {
	return &uploadR{}
}

func (r *uploadR) GetStore() *Store {
	if r == nil {
		return nil
	}
	return r.Store
}

func (r *uploadR) GetFiles() FileSlice {
	if r == nil {
		return nil
	}
	return r.Files
}

// uploadL is where Load methods for each relationship are stored.
type uploadL struct{}

var (
	uploadAllColumns            = []string{"upload_id", "store_id", "description", "build", "timestamp", "status"}
	uploadColumnsWithoutDefault = []string{"description", "build", "timestamp", "status"}
	uploadColumnsWithDefault    = []string{"upload_id", "store_id"}
	uploadPrimaryKeyColumns     = []string{"upload_id"}
	uploadGeneratedColumns      = []string{"upload_id"}
)

type (
	// UploadSlice is an alias for a slice of pointers to Upload.
	// This should almost always be used instead of []Upload.
	UploadSlice []*Upload
	// UploadHook is the signature for custom Upload hook methods
	UploadHook func(context.Context, boil.ContextExecutor, *Upload) error

	uploadQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	uploadType                 = reflect.TypeOf(&Upload{})
	uploadMapping              = queries.MakeStructMapping(uploadType)
	uploadPrimaryKeyMapping, _ = queries.BindMapping(uploadType, uploadMapping, uploadPrimaryKeyColumns)
	uploadInsertCacheMut       sync.RWMutex
	uploadInsertCache          = make(map[string]insertCache)
	uploadUpdateCacheMut       sync.RWMutex
	uploadUpdateCache          = make(map[string]updateCache)
	uploadUpsertCacheMut       sync.RWMutex
	uploadUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var uploadAfterSelectHooks []UploadHook

var uploadBeforeInsertHooks []UploadHook
var uploadAfterInsertHooks []UploadHook

var uploadBeforeUpdateHooks []UploadHook
var uploadAfterUpdateHooks []UploadHook

var uploadBeforeDeleteHooks []UploadHook
var uploadAfterDeleteHooks []UploadHook

var uploadBeforeUpsertHooks []UploadHook
var uploadAfterUpsertHooks []UploadHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Upload) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range uploadAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Upload) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range uploadBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Upload) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range uploadAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Upload) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range uploadBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Upload) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range uploadAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Upload) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range uploadBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Upload) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range uploadAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Upload) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range uploadBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Upload) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range uploadAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUploadHook registers your hook function for all future operations.
func AddUploadHook(hookPoint boil.HookPoint, uploadHook UploadHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		uploadAfterSelectHooks = append(uploadAfterSelectHooks, uploadHook)
	case boil.BeforeInsertHook:
		uploadBeforeInsertHooks = append(uploadBeforeInsertHooks, uploadHook)
	case boil.AfterInsertHook:
		uploadAfterInsertHooks = append(uploadAfterInsertHooks, uploadHook)
	case boil.BeforeUpdateHook:
		uploadBeforeUpdateHooks = append(uploadBeforeUpdateHooks, uploadHook)
	case boil.AfterUpdateHook:
		uploadAfterUpdateHooks = append(uploadAfterUpdateHooks, uploadHook)
	case boil.BeforeDeleteHook:
		uploadBeforeDeleteHooks = append(uploadBeforeDeleteHooks, uploadHook)
	case boil.AfterDeleteHook:
		uploadAfterDeleteHooks = append(uploadAfterDeleteHooks, uploadHook)
	case boil.BeforeUpsertHook:
		uploadBeforeUpsertHooks = append(uploadBeforeUpsertHooks, uploadHook)
	case boil.AfterUpsertHook:
		uploadAfterUpsertHooks = append(uploadAfterUpsertHooks, uploadHook)
	}
}

// One returns a single upload record from the query.
func (q uploadQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Upload, error) {
	o := &Upload{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for uploads")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Upload records from the query.
func (q uploadQuery) All(ctx context.Context, exec boil.ContextExecutor) (UploadSlice, error) {
	var o []*Upload

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Upload slice")
	}

	if len(uploadAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Upload records in the query.
func (q uploadQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count uploads rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q uploadQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if uploads exists")
	}

	return count > 0, nil
}

// Store pointed to by the foreign key.
func (o *Upload) Store(mods ...qm.QueryMod) storeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"store_id\" = ?", o.StoreID),
	}

	queryMods = append(queryMods, mods...)

	return Stores(queryMods...)
}

// Files retrieves all the file's Files with an executor.
func (o *Upload) Files(mods ...qm.QueryMod) fileQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"cloud_symbol_server\".\"files\".\"upload_id\"=?", o.UploadID),
	)

	return Files(queryMods...)
}

// LoadStore allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (uploadL) LoadStore(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUpload interface{}, mods queries.Applicator) error {
	var slice []*Upload
	var object *Upload

	if singular {
		var ok bool
		object, ok = maybeUpload.(*Upload)
		if !ok {
			object = new(Upload)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUpload)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUpload))
			}
		}
	} else {
		s, ok := maybeUpload.(*[]*Upload)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUpload)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUpload))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &uploadR{}
		}
		if !queries.IsNil(object.StoreID) {
			args = append(args, object.StoreID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &uploadR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.StoreID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.StoreID) {
				args = append(args, obj.StoreID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`cloud_symbol_server.stores`),
		qm.WhereIn(`cloud_symbol_server.stores.store_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Store")
	}

	var resultSlice []*Store
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Store")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for stores")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for stores")
	}

	if len(uploadAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Store = foreign
		if foreign.R == nil {
			foreign.R = &storeR{}
		}
		foreign.R.Uploads = append(foreign.R.Uploads, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.StoreID, foreign.StoreID) {
				local.R.Store = foreign
				if foreign.R == nil {
					foreign.R = &storeR{}
				}
				foreign.R.Uploads = append(foreign.R.Uploads, local)
				break
			}
		}
	}

	return nil
}

// LoadFiles allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (uploadL) LoadFiles(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUpload interface{}, mods queries.Applicator) error {
	var slice []*Upload
	var object *Upload

	if singular {
		var ok bool
		object, ok = maybeUpload.(*Upload)
		if !ok {
			object = new(Upload)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUpload)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUpload))
			}
		}
	} else {
		s, ok := maybeUpload.(*[]*Upload)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUpload)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUpload))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &uploadR{}
		}
		args = append(args, object.UploadID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &uploadR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.UploadID) {
					continue Outer
				}
			}

			args = append(args, obj.UploadID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`cloud_symbol_server.files`),
		qm.WhereIn(`cloud_symbol_server.files.upload_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load files")
	}

	var resultSlice []*File
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice files")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on files")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for files")
	}

	if len(fileAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Files = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &fileR{}
			}
			foreign.R.Upload = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.UploadID, foreign.UploadID) {
				local.R.Files = append(local.R.Files, foreign)
				if foreign.R == nil {
					foreign.R = &fileR{}
				}
				foreign.R.Upload = local
				break
			}
		}
	}

	return nil
}

// SetStore of the upload to the related item.
// Sets o.R.Store to related.
// Adds o to related.R.Uploads.
func (o *Upload) SetStore(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Store) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"cloud_symbol_server\".\"uploads\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"store_id"}),
		strmangle.WhereClause("\"", "\"", 2, uploadPrimaryKeyColumns),
	)
	values := []interface{}{related.StoreID, o.UploadID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.StoreID, related.StoreID)
	if o.R == nil {
		o.R = &uploadR{
			Store: related,
		}
	} else {
		o.R.Store = related
	}

	if related.R == nil {
		related.R = &storeR{
			Uploads: UploadSlice{o},
		}
	} else {
		related.R.Uploads = append(related.R.Uploads, o)
	}

	return nil
}

// RemoveStore relationship.
// Sets o.R.Store to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Upload) RemoveStore(ctx context.Context, exec boil.ContextExecutor, related *Store) error {
	var err error

	queries.SetScanner(&o.StoreID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("store_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Store = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Uploads {
		if queries.Equal(o.StoreID, ri.StoreID) {
			continue
		}

		ln := len(related.R.Uploads)
		if ln > 1 && i < ln-1 {
			related.R.Uploads[i] = related.R.Uploads[ln-1]
		}
		related.R.Uploads = related.R.Uploads[:ln-1]
		break
	}
	return nil
}

// AddFiles adds the given related objects to the existing relationships
// of the upload, optionally inserting them as new records.
// Appends related to o.R.Files.
// Sets related.R.Upload appropriately.
func (o *Upload) AddFiles(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*File) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.UploadID, o.UploadID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"cloud_symbol_server\".\"files\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"upload_id"}),
				strmangle.WhereClause("\"", "\"", 2, filePrimaryKeyColumns),
			)
			values := []interface{}{o.UploadID, rel.FileID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.UploadID, o.UploadID)
		}
	}

	if o.R == nil {
		o.R = &uploadR{
			Files: related,
		}
	} else {
		o.R.Files = append(o.R.Files, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &fileR{
				Upload: o,
			}
		} else {
			rel.R.Upload = o
		}
	}
	return nil
}

// SetFiles removes all previously related items of the
// upload replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Upload's Files accordingly.
// Replaces o.R.Files with related.
// Sets related.R.Upload's Files accordingly.
func (o *Upload) SetFiles(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*File) error {
	query := "update \"cloud_symbol_server\".\"files\" set \"upload_id\" = null where \"upload_id\" = $1"
	values := []interface{}{o.UploadID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Files {
			queries.SetScanner(&rel.UploadID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Upload = nil
		}
		o.R.Files = nil
	}

	return o.AddFiles(ctx, exec, insert, related...)
}

// RemoveFiles relationships from objects passed in.
// Removes related items from R.Files (uses pointer comparison, removal does not keep order)
// Sets related.R.Upload.
func (o *Upload) RemoveFiles(ctx context.Context, exec boil.ContextExecutor, related ...*File) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.UploadID, nil)
		if rel.R != nil {
			rel.R.Upload = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("upload_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Files {
			if rel != ri {
				continue
			}

			ln := len(o.R.Files)
			if ln > 1 && i < ln-1 {
				o.R.Files[i] = o.R.Files[ln-1]
			}
			o.R.Files = o.R.Files[:ln-1]
			break
		}
	}

	return nil
}

// Uploads retrieves all the records using an executor.
func Uploads(mods ...qm.QueryMod) uploadQuery {
	mods = append(mods, qm.From("\"cloud_symbol_server\".\"uploads\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"cloud_symbol_server\".\"uploads\".*"})
	}

	return uploadQuery{q}
}

// FindUpload retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUpload(ctx context.Context, exec boil.ContextExecutor, uploadID int, selectCols ...string) (*Upload, error) {
	uploadObj := &Upload{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"cloud_symbol_server\".\"uploads\" where \"upload_id\"=$1", sel,
	)

	q := queries.Raw(query, uploadID)

	err := q.Bind(ctx, exec, uploadObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from uploads")
	}

	if err = uploadObj.doAfterSelectHooks(ctx, exec); err != nil {
		return uploadObj, err
	}

	return uploadObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Upload) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no uploads provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(uploadColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	uploadInsertCacheMut.RLock()
	cache, cached := uploadInsertCache[key]
	uploadInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			uploadAllColumns,
			uploadColumnsWithDefault,
			uploadColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, uploadGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(uploadType, uploadMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(uploadType, uploadMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"cloud_symbol_server\".\"uploads\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"cloud_symbol_server\".\"uploads\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into uploads")
	}

	if !cached {
		uploadInsertCacheMut.Lock()
		uploadInsertCache[key] = cache
		uploadInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Upload.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Upload) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	uploadUpdateCacheMut.RLock()
	cache, cached := uploadUpdateCache[key]
	uploadUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			uploadAllColumns,
			uploadPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, uploadGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update uploads, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"cloud_symbol_server\".\"uploads\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, uploadPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(uploadType, uploadMapping, append(wl, uploadPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update uploads row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for uploads")
	}

	if !cached {
		uploadUpdateCacheMut.Lock()
		uploadUpdateCache[key] = cache
		uploadUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q uploadQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for uploads")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for uploads")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UploadSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), uploadPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"cloud_symbol_server\".\"uploads\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, uploadPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in upload slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all upload")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Upload) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no uploads provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(uploadColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	uploadUpsertCacheMut.RLock()
	cache, cached := uploadUpsertCache[key]
	uploadUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			uploadAllColumns,
			uploadColumnsWithDefault,
			uploadColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			uploadAllColumns,
			uploadPrimaryKeyColumns,
		)

		insert = strmangle.SetComplement(insert, uploadGeneratedColumns)
		update = strmangle.SetComplement(update, uploadGeneratedColumns)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert uploads, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(uploadPrimaryKeyColumns))
			copy(conflict, uploadPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"cloud_symbol_server\".\"uploads\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(uploadType, uploadMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(uploadType, uploadMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert uploads")
	}

	if !cached {
		uploadUpsertCacheMut.Lock()
		uploadUpsertCache[key] = cache
		uploadUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Upload record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Upload) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Upload provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uploadPrimaryKeyMapping)
	sql := "DELETE FROM \"cloud_symbol_server\".\"uploads\" WHERE \"upload_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from uploads")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for uploads")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q uploadQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no uploadQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from uploads")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for uploads")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UploadSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(uploadBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), uploadPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"cloud_symbol_server\".\"uploads\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, uploadPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from upload slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for uploads")
	}

	if len(uploadAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Upload) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUpload(ctx, exec, o.UploadID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UploadSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UploadSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), uploadPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"cloud_symbol_server\".\"uploads\".* FROM \"cloud_symbol_server\".\"uploads\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, uploadPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in UploadSlice")
	}

	*o = slice

	return nil
}

// UploadExists checks if the Upload row exists.
func UploadExists(ctx context.Context, exec boil.ContextExecutor, uploadID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"cloud_symbol_server\".\"uploads\" where \"upload_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, uploadID)
	}
	row := exec.QueryRowContext(ctx, sql, uploadID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if uploads exists")
	}

	return exists, nil
}
