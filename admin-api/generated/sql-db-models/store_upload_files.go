// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// StoreUploadFile is an object representing the database table.
type StoreUploadFile struct {
	FileID          int      `boil:"file_id" json:"file_id" toml:"file_id" yaml:"file_id"`
	UploadID        null.Int `boil:"upload_id" json:"upload_id,omitempty" toml:"upload_id" yaml:"upload_id,omitempty"`
	UploadFileIndex int      `boil:"upload_file_index" json:"upload_file_index" toml:"upload_file_index" yaml:"upload_file_index"`
	FileName        string   `boil:"file_name" json:"file_name" toml:"file_name" yaml:"file_name"`
	Hash            string   `boil:"hash" json:"hash" toml:"hash" yaml:"hash"`
	Status          string   `boil:"status" json:"status" toml:"status" yaml:"status"`

	R *storeUploadFileR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L storeUploadFileL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var StoreUploadFileColumns = struct {
	FileID          string
	UploadID        string
	UploadFileIndex string
	FileName        string
	Hash            string
	Status          string
}{
	FileID:          "file_id",
	UploadID:        "upload_id",
	UploadFileIndex: "upload_file_index",
	FileName:        "file_name",
	Hash:            "hash",
	Status:          "status",
}

var StoreUploadFileTableColumns = struct {
	FileID          string
	UploadID        string
	UploadFileIndex string
	FileName        string
	Hash            string
	Status          string
}{
	FileID:          "store_upload_files.file_id",
	UploadID:        "store_upload_files.upload_id",
	UploadFileIndex: "store_upload_files.upload_file_index",
	FileName:        "store_upload_files.file_name",
	Hash:            "store_upload_files.hash",
	Status:          "store_upload_files.status",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Int) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Int) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var StoreUploadFileWhere = struct {
	FileID          whereHelperint
	UploadID        whereHelpernull_Int
	UploadFileIndex whereHelperint
	FileName        whereHelperstring
	Hash            whereHelperstring
	Status          whereHelperstring
}{
	FileID:          whereHelperint{field: "\"cloud_symbol_server\".\"store_upload_files\".\"file_id\""},
	UploadID:        whereHelpernull_Int{field: "\"cloud_symbol_server\".\"store_upload_files\".\"upload_id\""},
	UploadFileIndex: whereHelperint{field: "\"cloud_symbol_server\".\"store_upload_files\".\"upload_file_index\""},
	FileName:        whereHelperstring{field: "\"cloud_symbol_server\".\"store_upload_files\".\"file_name\""},
	Hash:            whereHelperstring{field: "\"cloud_symbol_server\".\"store_upload_files\".\"hash\""},
	Status:          whereHelperstring{field: "\"cloud_symbol_server\".\"store_upload_files\".\"status\""},
}

// StoreUploadFileRels is where relationship names are stored.
var StoreUploadFileRels = struct {
	Upload string
}{
	Upload: "Upload",
}

// storeUploadFileR is where relationships are stored.
type storeUploadFileR struct {
	Upload *StoreUpload `boil:"Upload" json:"Upload" toml:"Upload" yaml:"Upload"`
}

// NewStruct creates a new relationship struct
func (*storeUploadFileR) NewStruct() *storeUploadFileR {
	return &storeUploadFileR{}
}

func (r *storeUploadFileR) GetUpload() *StoreUpload {
	if r == nil {
		return nil
	}
	return r.Upload
}

// storeUploadFileL is where Load methods for each relationship are stored.
type storeUploadFileL struct{}

var (
	storeUploadFileAllColumns            = []string{"file_id", "upload_id", "upload_file_index", "file_name", "hash", "status"}
	storeUploadFileColumnsWithoutDefault = []string{"upload_file_index", "file_name", "hash", "status"}
	storeUploadFileColumnsWithDefault    = []string{"file_id", "upload_id"}
	storeUploadFilePrimaryKeyColumns     = []string{"file_id"}
	storeUploadFileGeneratedColumns      = []string{"file_id"}
)

type (
	// StoreUploadFileSlice is an alias for a slice of pointers to StoreUploadFile.
	// This should almost always be used instead of []StoreUploadFile.
	StoreUploadFileSlice []*StoreUploadFile
	// StoreUploadFileHook is the signature for custom StoreUploadFile hook methods
	StoreUploadFileHook func(context.Context, boil.ContextExecutor, *StoreUploadFile) error

	storeUploadFileQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	storeUploadFileType                 = reflect.TypeOf(&StoreUploadFile{})
	storeUploadFileMapping              = queries.MakeStructMapping(storeUploadFileType)
	storeUploadFilePrimaryKeyMapping, _ = queries.BindMapping(storeUploadFileType, storeUploadFileMapping, storeUploadFilePrimaryKeyColumns)
	storeUploadFileInsertCacheMut       sync.RWMutex
	storeUploadFileInsertCache          = make(map[string]insertCache)
	storeUploadFileUpdateCacheMut       sync.RWMutex
	storeUploadFileUpdateCache          = make(map[string]updateCache)
	storeUploadFileUpsertCacheMut       sync.RWMutex
	storeUploadFileUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var storeUploadFileAfterSelectHooks []StoreUploadFileHook

var storeUploadFileBeforeInsertHooks []StoreUploadFileHook
var storeUploadFileAfterInsertHooks []StoreUploadFileHook

var storeUploadFileBeforeUpdateHooks []StoreUploadFileHook
var storeUploadFileAfterUpdateHooks []StoreUploadFileHook

var storeUploadFileBeforeDeleteHooks []StoreUploadFileHook
var storeUploadFileAfterDeleteHooks []StoreUploadFileHook

var storeUploadFileBeforeUpsertHooks []StoreUploadFileHook
var storeUploadFileAfterUpsertHooks []StoreUploadFileHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *StoreUploadFile) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range storeUploadFileAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *StoreUploadFile) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range storeUploadFileBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *StoreUploadFile) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range storeUploadFileAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *StoreUploadFile) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range storeUploadFileBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *StoreUploadFile) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range storeUploadFileAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *StoreUploadFile) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range storeUploadFileBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *StoreUploadFile) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range storeUploadFileAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *StoreUploadFile) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range storeUploadFileBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *StoreUploadFile) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range storeUploadFileAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddStoreUploadFileHook registers your hook function for all future operations.
func AddStoreUploadFileHook(hookPoint boil.HookPoint, storeUploadFileHook StoreUploadFileHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		storeUploadFileAfterSelectHooks = append(storeUploadFileAfterSelectHooks, storeUploadFileHook)
	case boil.BeforeInsertHook:
		storeUploadFileBeforeInsertHooks = append(storeUploadFileBeforeInsertHooks, storeUploadFileHook)
	case boil.AfterInsertHook:
		storeUploadFileAfterInsertHooks = append(storeUploadFileAfterInsertHooks, storeUploadFileHook)
	case boil.BeforeUpdateHook:
		storeUploadFileBeforeUpdateHooks = append(storeUploadFileBeforeUpdateHooks, storeUploadFileHook)
	case boil.AfterUpdateHook:
		storeUploadFileAfterUpdateHooks = append(storeUploadFileAfterUpdateHooks, storeUploadFileHook)
	case boil.BeforeDeleteHook:
		storeUploadFileBeforeDeleteHooks = append(storeUploadFileBeforeDeleteHooks, storeUploadFileHook)
	case boil.AfterDeleteHook:
		storeUploadFileAfterDeleteHooks = append(storeUploadFileAfterDeleteHooks, storeUploadFileHook)
	case boil.BeforeUpsertHook:
		storeUploadFileBeforeUpsertHooks = append(storeUploadFileBeforeUpsertHooks, storeUploadFileHook)
	case boil.AfterUpsertHook:
		storeUploadFileAfterUpsertHooks = append(storeUploadFileAfterUpsertHooks, storeUploadFileHook)
	}
}

// One returns a single storeUploadFile record from the query.
func (q storeUploadFileQuery) One(ctx context.Context, exec boil.ContextExecutor) (*StoreUploadFile, error) {
	o := &StoreUploadFile{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for store_upload_files")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all StoreUploadFile records from the query.
func (q storeUploadFileQuery) All(ctx context.Context, exec boil.ContextExecutor) (StoreUploadFileSlice, error) {
	var o []*StoreUploadFile

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to StoreUploadFile slice")
	}

	if len(storeUploadFileAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all StoreUploadFile records in the query.
func (q storeUploadFileQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count store_upload_files rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q storeUploadFileQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if store_upload_files exists")
	}

	return count > 0, nil
}

// Upload pointed to by the foreign key.
func (o *StoreUploadFile) Upload(mods ...qm.QueryMod) storeUploadQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"upload_id\" = ?", o.UploadID),
	}

	queryMods = append(queryMods, mods...)

	return StoreUploads(queryMods...)
}

// LoadUpload allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (storeUploadFileL) LoadUpload(ctx context.Context, e boil.ContextExecutor, singular bool, maybeStoreUploadFile interface{}, mods queries.Applicator) error {
	var slice []*StoreUploadFile
	var object *StoreUploadFile

	if singular {
		var ok bool
		object, ok = maybeStoreUploadFile.(*StoreUploadFile)
		if !ok {
			object = new(StoreUploadFile)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeStoreUploadFile)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeStoreUploadFile))
			}
		}
	} else {
		s, ok := maybeStoreUploadFile.(*[]*StoreUploadFile)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeStoreUploadFile)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeStoreUploadFile))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &storeUploadFileR{}
		}
		if !queries.IsNil(object.UploadID) {
			args = append(args, object.UploadID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &storeUploadFileR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.UploadID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.UploadID) {
				args = append(args, obj.UploadID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`cloud_symbol_server.store_uploads`),
		qm.WhereIn(`cloud_symbol_server.store_uploads.upload_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load StoreUpload")
	}

	var resultSlice []*StoreUpload
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice StoreUpload")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for store_uploads")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for store_uploads")
	}

	if len(storeUploadFileAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Upload = foreign
		if foreign.R == nil {
			foreign.R = &storeUploadR{}
		}
		foreign.R.UploadStoreUploadFiles = append(foreign.R.UploadStoreUploadFiles, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.UploadID, foreign.UploadID) {
				local.R.Upload = foreign
				if foreign.R == nil {
					foreign.R = &storeUploadR{}
				}
				foreign.R.UploadStoreUploadFiles = append(foreign.R.UploadStoreUploadFiles, local)
				break
			}
		}
	}

	return nil
}

// SetUpload of the storeUploadFile to the related item.
// Sets o.R.Upload to related.
// Adds o to related.R.UploadStoreUploadFiles.
func (o *StoreUploadFile) SetUpload(ctx context.Context, exec boil.ContextExecutor, insert bool, related *StoreUpload) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"cloud_symbol_server\".\"store_upload_files\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"upload_id"}),
		strmangle.WhereClause("\"", "\"", 2, storeUploadFilePrimaryKeyColumns),
	)
	values := []interface{}{related.UploadID, o.FileID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.UploadID, related.UploadID)
	if o.R == nil {
		o.R = &storeUploadFileR{
			Upload: related,
		}
	} else {
		o.R.Upload = related
	}

	if related.R == nil {
		related.R = &storeUploadR{
			UploadStoreUploadFiles: StoreUploadFileSlice{o},
		}
	} else {
		related.R.UploadStoreUploadFiles = append(related.R.UploadStoreUploadFiles, o)
	}

	return nil
}

// RemoveUpload relationship.
// Sets o.R.Upload to nil.
// Removes o from all passed in related items' relationships struct.
func (o *StoreUploadFile) RemoveUpload(ctx context.Context, exec boil.ContextExecutor, related *StoreUpload) error {
	var err error

	queries.SetScanner(&o.UploadID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("upload_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Upload = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.UploadStoreUploadFiles {
		if queries.Equal(o.UploadID, ri.UploadID) {
			continue
		}

		ln := len(related.R.UploadStoreUploadFiles)
		if ln > 1 && i < ln-1 {
			related.R.UploadStoreUploadFiles[i] = related.R.UploadStoreUploadFiles[ln-1]
		}
		related.R.UploadStoreUploadFiles = related.R.UploadStoreUploadFiles[:ln-1]
		break
	}
	return nil
}

// StoreUploadFiles retrieves all the records using an executor.
func StoreUploadFiles(mods ...qm.QueryMod) storeUploadFileQuery {
	mods = append(mods, qm.From("\"cloud_symbol_server\".\"store_upload_files\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"cloud_symbol_server\".\"store_upload_files\".*"})
	}

	return storeUploadFileQuery{q}
}

// FindStoreUploadFile retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindStoreUploadFile(ctx context.Context, exec boil.ContextExecutor, fileID int, selectCols ...string) (*StoreUploadFile, error) {
	storeUploadFileObj := &StoreUploadFile{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"cloud_symbol_server\".\"store_upload_files\" where \"file_id\"=$1", sel,
	)

	q := queries.Raw(query, fileID)

	err := q.Bind(ctx, exec, storeUploadFileObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from store_upload_files")
	}

	if err = storeUploadFileObj.doAfterSelectHooks(ctx, exec); err != nil {
		return storeUploadFileObj, err
	}

	return storeUploadFileObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *StoreUploadFile) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no store_upload_files provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(storeUploadFileColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	storeUploadFileInsertCacheMut.RLock()
	cache, cached := storeUploadFileInsertCache[key]
	storeUploadFileInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			storeUploadFileAllColumns,
			storeUploadFileColumnsWithDefault,
			storeUploadFileColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, storeUploadFileGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(storeUploadFileType, storeUploadFileMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(storeUploadFileType, storeUploadFileMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"cloud_symbol_server\".\"store_upload_files\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"cloud_symbol_server\".\"store_upload_files\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into store_upload_files")
	}

	if !cached {
		storeUploadFileInsertCacheMut.Lock()
		storeUploadFileInsertCache[key] = cache
		storeUploadFileInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the StoreUploadFile.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *StoreUploadFile) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	storeUploadFileUpdateCacheMut.RLock()
	cache, cached := storeUploadFileUpdateCache[key]
	storeUploadFileUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			storeUploadFileAllColumns,
			storeUploadFilePrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, storeUploadFileGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update store_upload_files, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"cloud_symbol_server\".\"store_upload_files\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, storeUploadFilePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(storeUploadFileType, storeUploadFileMapping, append(wl, storeUploadFilePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update store_upload_files row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for store_upload_files")
	}

	if !cached {
		storeUploadFileUpdateCacheMut.Lock()
		storeUploadFileUpdateCache[key] = cache
		storeUploadFileUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q storeUploadFileQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for store_upload_files")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for store_upload_files")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o StoreUploadFileSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), storeUploadFilePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"cloud_symbol_server\".\"store_upload_files\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, storeUploadFilePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in storeUploadFile slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all storeUploadFile")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *StoreUploadFile) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no store_upload_files provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(storeUploadFileColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	storeUploadFileUpsertCacheMut.RLock()
	cache, cached := storeUploadFileUpsertCache[key]
	storeUploadFileUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			storeUploadFileAllColumns,
			storeUploadFileColumnsWithDefault,
			storeUploadFileColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			storeUploadFileAllColumns,
			storeUploadFilePrimaryKeyColumns,
		)

		insert = strmangle.SetComplement(insert, storeUploadFileGeneratedColumns)
		update = strmangle.SetComplement(update, storeUploadFileGeneratedColumns)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert store_upload_files, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(storeUploadFilePrimaryKeyColumns))
			copy(conflict, storeUploadFilePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"cloud_symbol_server\".\"store_upload_files\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(storeUploadFileType, storeUploadFileMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(storeUploadFileType, storeUploadFileMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert store_upload_files")
	}

	if !cached {
		storeUploadFileUpsertCacheMut.Lock()
		storeUploadFileUpsertCache[key] = cache
		storeUploadFileUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single StoreUploadFile record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *StoreUploadFile) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no StoreUploadFile provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), storeUploadFilePrimaryKeyMapping)
	sql := "DELETE FROM \"cloud_symbol_server\".\"store_upload_files\" WHERE \"file_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from store_upload_files")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for store_upload_files")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q storeUploadFileQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no storeUploadFileQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from store_upload_files")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for store_upload_files")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o StoreUploadFileSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(storeUploadFileBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), storeUploadFilePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"cloud_symbol_server\".\"store_upload_files\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, storeUploadFilePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from storeUploadFile slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for store_upload_files")
	}

	if len(storeUploadFileAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *StoreUploadFile) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindStoreUploadFile(ctx, exec, o.FileID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *StoreUploadFileSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := StoreUploadFileSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), storeUploadFilePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"cloud_symbol_server\".\"store_upload_files\".* FROM \"cloud_symbol_server\".\"store_upload_files\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, storeUploadFilePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in StoreUploadFileSlice")
	}

	*o = slice

	return nil
}

// StoreUploadFileExists checks if the StoreUploadFile row exists.
func StoreUploadFileExists(ctx context.Context, exec boil.ContextExecutor, fileID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"cloud_symbol_server\".\"store_upload_files\" where \"file_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, fileID)
	}
	row := exec.QueryRowContext(ctx, sql, fileID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if store_upload_files exists")
	}

	return exists, nil
}
