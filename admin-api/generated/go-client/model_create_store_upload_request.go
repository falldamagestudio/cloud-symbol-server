/*
Cloud Symbol Server Admin API

This is the API that is used to manage stores and uploads in Cloud Symbol Server

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// CreateStoreUploadRequest struct for CreateStoreUploadRequest
type CreateStoreUploadRequest struct {
	// When present and set to true, the client will provide progress updates; Legacy clients will create an upload, then upload the required files to GCS, without progress/completion callbacks
	UseProgressApi *bool `json:"useProgressApi,omitempty"`
	Description *string `json:"description,omitempty"`
	BuildId *string `json:"buildId,omitempty"`
	Files []UploadFileRequest `json:"files,omitempty"`
}

// NewCreateStoreUploadRequest instantiates a new CreateStoreUploadRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateStoreUploadRequest() *CreateStoreUploadRequest {
	this := CreateStoreUploadRequest{}
	return &this
}

// NewCreateStoreUploadRequestWithDefaults instantiates a new CreateStoreUploadRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateStoreUploadRequestWithDefaults() *CreateStoreUploadRequest {
	this := CreateStoreUploadRequest{}
	return &this
}

// GetUseProgressApi returns the UseProgressApi field value if set, zero value otherwise.
func (o *CreateStoreUploadRequest) GetUseProgressApi() bool {
	if o == nil || isNil(o.UseProgressApi) {
		var ret bool
		return ret
	}
	return *o.UseProgressApi
}

// GetUseProgressApiOk returns a tuple with the UseProgressApi field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateStoreUploadRequest) GetUseProgressApiOk() (*bool, bool) {
	if o == nil || isNil(o.UseProgressApi) {
    return nil, false
	}
	return o.UseProgressApi, true
}

// HasUseProgressApi returns a boolean if a field has been set.
func (o *CreateStoreUploadRequest) HasUseProgressApi() bool {
	if o != nil && !isNil(o.UseProgressApi) {
		return true
	}

	return false
}

// SetUseProgressApi gets a reference to the given bool and assigns it to the UseProgressApi field.
func (o *CreateStoreUploadRequest) SetUseProgressApi(v bool) {
	o.UseProgressApi = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *CreateStoreUploadRequest) GetDescription() string {
	if o == nil || isNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateStoreUploadRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || isNil(o.Description) {
    return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *CreateStoreUploadRequest) HasDescription() bool {
	if o != nil && !isNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *CreateStoreUploadRequest) SetDescription(v string) {
	o.Description = &v
}

// GetBuildId returns the BuildId field value if set, zero value otherwise.
func (o *CreateStoreUploadRequest) GetBuildId() string {
	if o == nil || isNil(o.BuildId) {
		var ret string
		return ret
	}
	return *o.BuildId
}

// GetBuildIdOk returns a tuple with the BuildId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateStoreUploadRequest) GetBuildIdOk() (*string, bool) {
	if o == nil || isNil(o.BuildId) {
    return nil, false
	}
	return o.BuildId, true
}

// HasBuildId returns a boolean if a field has been set.
func (o *CreateStoreUploadRequest) HasBuildId() bool {
	if o != nil && !isNil(o.BuildId) {
		return true
	}

	return false
}

// SetBuildId gets a reference to the given string and assigns it to the BuildId field.
func (o *CreateStoreUploadRequest) SetBuildId(v string) {
	o.BuildId = &v
}

// GetFiles returns the Files field value if set, zero value otherwise.
func (o *CreateStoreUploadRequest) GetFiles() []UploadFileRequest {
	if o == nil || isNil(o.Files) {
		var ret []UploadFileRequest
		return ret
	}
	return o.Files
}

// GetFilesOk returns a tuple with the Files field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateStoreUploadRequest) GetFilesOk() ([]UploadFileRequest, bool) {
	if o == nil || isNil(o.Files) {
    return nil, false
	}
	return o.Files, true
}

// HasFiles returns a boolean if a field has been set.
func (o *CreateStoreUploadRequest) HasFiles() bool {
	if o != nil && !isNil(o.Files) {
		return true
	}

	return false
}

// SetFiles gets a reference to the given []UploadFileRequest and assigns it to the Files field.
func (o *CreateStoreUploadRequest) SetFiles(v []UploadFileRequest) {
	o.Files = v
}

func (o CreateStoreUploadRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.UseProgressApi) {
		toSerialize["useProgressApi"] = o.UseProgressApi
	}
	if !isNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !isNil(o.BuildId) {
		toSerialize["buildId"] = o.BuildId
	}
	if !isNil(o.Files) {
		toSerialize["files"] = o.Files
	}
	return json.Marshal(toSerialize)
}

type NullableCreateStoreUploadRequest struct {
	value *CreateStoreUploadRequest
	isSet bool
}

func (v NullableCreateStoreUploadRequest) Get() *CreateStoreUploadRequest {
	return v.value
}

func (v *NullableCreateStoreUploadRequest) Set(val *CreateStoreUploadRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateStoreUploadRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateStoreUploadRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateStoreUploadRequest(val *CreateStoreUploadRequest) *NullableCreateStoreUploadRequest {
	return &NullableCreateStoreUploadRequest{value: val, isSet: true}
}

func (v NullableCreateStoreUploadRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateStoreUploadRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


