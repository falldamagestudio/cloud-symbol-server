/*
Cloud Symbol Server Admin API

Testing DefaultApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
    "context"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require"
    "testing"
    openapiclient "./openapi"
)

func Test_openapi_DefaultApiService(t *testing.T) {

    configuration := openapiclient.NewConfiguration()
    apiClient := openapiclient.NewAPIClient(configuration)

    t.Run("Test DefaultApiService CreateStore", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var storeId string

        resp, httpRes, err := apiClient.DefaultApi.CreateStore(context.Background(), storeId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DefaultApiService CreateStoreUpload", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var storeId string

        resp, httpRes, err := apiClient.DefaultApi.CreateStoreUpload(context.Background(), storeId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DefaultApiService CreateToken", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.DefaultApi.CreateToken(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DefaultApiService DeleteStore", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var storeId string

        resp, httpRes, err := apiClient.DefaultApi.DeleteStore(context.Background(), storeId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DefaultApiService DeleteToken", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var token string

        resp, httpRes, err := apiClient.DefaultApi.DeleteToken(context.Background(), token).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DefaultApiService ExpireStoreUpload", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var uploadId string
        var storeId string

        resp, httpRes, err := apiClient.DefaultApi.ExpireStoreUpload(context.Background(), uploadId, storeId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DefaultApiService GetStoreFileIds", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var storeId string

        resp, httpRes, err := apiClient.DefaultApi.GetStoreFileIds(context.Background(), storeId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DefaultApiService GetStoreUpload", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var uploadId string
        var storeId string

        resp, httpRes, err := apiClient.DefaultApi.GetStoreUpload(context.Background(), uploadId, storeId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DefaultApiService GetStoreUploadIds", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var storeId string

        resp, httpRes, err := apiClient.DefaultApi.GetStoreUploadIds(context.Background(), storeId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DefaultApiService GetStores", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.DefaultApi.GetStores(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DefaultApiService GetToken", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var token string

        resp, httpRes, err := apiClient.DefaultApi.GetToken(context.Background(), token).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DefaultApiService GetTokens", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.DefaultApi.GetTokens(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DefaultApiService MarkStoreUploadAborted", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var uploadId string
        var storeId string

        resp, httpRes, err := apiClient.DefaultApi.MarkStoreUploadAborted(context.Background(), uploadId, storeId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DefaultApiService MarkStoreUploadCompleted", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var uploadId string
        var storeId string

        resp, httpRes, err := apiClient.DefaultApi.MarkStoreUploadCompleted(context.Background(), uploadId, storeId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DefaultApiService MarkStoreUploadFileUploaded", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var uploadId string
        var storeId string
        var fileId int32

        resp, httpRes, err := apiClient.DefaultApi.MarkStoreUploadFileUploaded(context.Background(), uploadId, storeId, fileId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DefaultApiService UpdateToken", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var token string

        resp, httpRes, err := apiClient.DefaultApi.UpdateToken(context.Background(), token).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

}
