/*
Cloud Symbol Server Uplaod API

This is the API that is used to upload symbols to Cloud Symbol Server

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// UploadTransactionResponse struct for UploadTransactionResponse
type UploadTransactionResponse struct {
	Id *string `json:"id,omitempty"`
	Files *[]UploadFileResponse `json:"files,omitempty"`
}

// NewUploadTransactionResponse instantiates a new UploadTransactionResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUploadTransactionResponse() *UploadTransactionResponse {
	this := UploadTransactionResponse{}
	return &this
}

// NewUploadTransactionResponseWithDefaults instantiates a new UploadTransactionResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUploadTransactionResponseWithDefaults() *UploadTransactionResponse {
	this := UploadTransactionResponse{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *UploadTransactionResponse) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UploadTransactionResponse) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *UploadTransactionResponse) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *UploadTransactionResponse) SetId(v string) {
	o.Id = &v
}

// GetFiles returns the Files field value if set, zero value otherwise.
func (o *UploadTransactionResponse) GetFiles() []UploadFileResponse {
	if o == nil || o.Files == nil {
		var ret []UploadFileResponse
		return ret
	}
	return *o.Files
}

// GetFilesOk returns a tuple with the Files field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UploadTransactionResponse) GetFilesOk() (*[]UploadFileResponse, bool) {
	if o == nil || o.Files == nil {
		return nil, false
	}
	return o.Files, true
}

// HasFiles returns a boolean if a field has been set.
func (o *UploadTransactionResponse) HasFiles() bool {
	if o != nil && o.Files != nil {
		return true
	}

	return false
}

// SetFiles gets a reference to the given []UploadFileResponse and assigns it to the Files field.
func (o *UploadTransactionResponse) SetFiles(v []UploadFileResponse) {
	o.Files = &v
}

func (o UploadTransactionResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Files != nil {
		toSerialize["files"] = o.Files
	}
	return json.Marshal(toSerialize)
}

type NullableUploadTransactionResponse struct {
	value *UploadTransactionResponse
	isSet bool
}

func (v NullableUploadTransactionResponse) Get() *UploadTransactionResponse {
	return v.value
}

func (v *NullableUploadTransactionResponse) Set(val *UploadTransactionResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableUploadTransactionResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableUploadTransactionResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUploadTransactionResponse(val *UploadTransactionResponse) *NullableUploadTransactionResponse {
	return &NullableUploadTransactionResponse{value: val, isSet: true}
}

func (v NullableUploadTransactionResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUploadTransactionResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


