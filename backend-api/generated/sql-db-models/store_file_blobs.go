// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// StoreFileBlob is an object representing the database table.
type StoreFileBlob struct {
	BlobID          int       `boil:"blob_id" json:"blob_id" toml:"blob_id" yaml:"blob_id"`
	FileID          null.Int  `boil:"file_id" json:"file_id,omitempty" toml:"file_id" yaml:"file_id,omitempty"`
	BlobIdentifier  string    `boil:"blob_identifier" json:"blob_identifier" toml:"blob_identifier" yaml:"blob_identifier"`
	UploadTimestamp time.Time `boil:"upload_timestamp" json:"upload_timestamp" toml:"upload_timestamp" yaml:"upload_timestamp"`
	Status          string    `boil:"status" json:"status" toml:"status" yaml:"status"`

	R *storeFileBlobR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L storeFileBlobL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var StoreFileBlobColumns = struct {
	BlobID          string
	FileID          string
	BlobIdentifier  string
	UploadTimestamp string
	Status          string
}{
	BlobID:          "blob_id",
	FileID:          "file_id",
	BlobIdentifier:  "blob_identifier",
	UploadTimestamp: "upload_timestamp",
	Status:          "status",
}

var StoreFileBlobTableColumns = struct {
	BlobID          string
	FileID          string
	BlobIdentifier  string
	UploadTimestamp string
	Status          string
}{
	BlobID:          "store_file_blobs.blob_id",
	FileID:          "store_file_blobs.file_id",
	BlobIdentifier:  "store_file_blobs.blob_identifier",
	UploadTimestamp: "store_file_blobs.upload_timestamp",
	Status:          "store_file_blobs.status",
}

// Generated where

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Int) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Int) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var StoreFileBlobWhere = struct {
	BlobID          whereHelperint
	FileID          whereHelpernull_Int
	BlobIdentifier  whereHelperstring
	UploadTimestamp whereHelpertime_Time
	Status          whereHelperstring
}{
	BlobID:          whereHelperint{field: "\"cloud_symbol_server\".\"store_file_blobs\".\"blob_id\""},
	FileID:          whereHelpernull_Int{field: "\"cloud_symbol_server\".\"store_file_blobs\".\"file_id\""},
	BlobIdentifier:  whereHelperstring{field: "\"cloud_symbol_server\".\"store_file_blobs\".\"blob_identifier\""},
	UploadTimestamp: whereHelpertime_Time{field: "\"cloud_symbol_server\".\"store_file_blobs\".\"upload_timestamp\""},
	Status:          whereHelperstring{field: "\"cloud_symbol_server\".\"store_file_blobs\".\"status\""},
}

// StoreFileBlobRels is where relationship names are stored.
var StoreFileBlobRels = struct {
	File                 string
	BlobStoreUploadFiles string
}{
	File:                 "File",
	BlobStoreUploadFiles: "BlobStoreUploadFiles",
}

// storeFileBlobR is where relationships are stored.
type storeFileBlobR struct {
	File                 *StoreFile           `boil:"File" json:"File" toml:"File" yaml:"File"`
	BlobStoreUploadFiles StoreUploadFileSlice `boil:"BlobStoreUploadFiles" json:"BlobStoreUploadFiles" toml:"BlobStoreUploadFiles" yaml:"BlobStoreUploadFiles"`
}

// NewStruct creates a new relationship struct
func (*storeFileBlobR) NewStruct() *storeFileBlobR {
	return &storeFileBlobR{}
}

func (r *storeFileBlobR) GetFile() *StoreFile {
	if r == nil {
		return nil
	}
	return r.File
}

func (r *storeFileBlobR) GetBlobStoreUploadFiles() StoreUploadFileSlice {
	if r == nil {
		return nil
	}
	return r.BlobStoreUploadFiles
}

// storeFileBlobL is where Load methods for each relationship are stored.
type storeFileBlobL struct{}

var (
	storeFileBlobAllColumns            = []string{"blob_id", "file_id", "blob_identifier", "upload_timestamp", "status"}
	storeFileBlobColumnsWithoutDefault = []string{"blob_identifier", "upload_timestamp", "status"}
	storeFileBlobColumnsWithDefault    = []string{"blob_id", "file_id"}
	storeFileBlobPrimaryKeyColumns     = []string{"blob_id"}
	storeFileBlobGeneratedColumns      = []string{"blob_id"}
)

type (
	// StoreFileBlobSlice is an alias for a slice of pointers to StoreFileBlob.
	// This should almost always be used instead of []StoreFileBlob.
	StoreFileBlobSlice []*StoreFileBlob
	// StoreFileBlobHook is the signature for custom StoreFileBlob hook methods
	StoreFileBlobHook func(context.Context, boil.ContextExecutor, *StoreFileBlob) error

	storeFileBlobQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	storeFileBlobType                 = reflect.TypeOf(&StoreFileBlob{})
	storeFileBlobMapping              = queries.MakeStructMapping(storeFileBlobType)
	storeFileBlobPrimaryKeyMapping, _ = queries.BindMapping(storeFileBlobType, storeFileBlobMapping, storeFileBlobPrimaryKeyColumns)
	storeFileBlobInsertCacheMut       sync.RWMutex
	storeFileBlobInsertCache          = make(map[string]insertCache)
	storeFileBlobUpdateCacheMut       sync.RWMutex
	storeFileBlobUpdateCache          = make(map[string]updateCache)
	storeFileBlobUpsertCacheMut       sync.RWMutex
	storeFileBlobUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var storeFileBlobAfterSelectHooks []StoreFileBlobHook

var storeFileBlobBeforeInsertHooks []StoreFileBlobHook
var storeFileBlobAfterInsertHooks []StoreFileBlobHook

var storeFileBlobBeforeUpdateHooks []StoreFileBlobHook
var storeFileBlobAfterUpdateHooks []StoreFileBlobHook

var storeFileBlobBeforeDeleteHooks []StoreFileBlobHook
var storeFileBlobAfterDeleteHooks []StoreFileBlobHook

var storeFileBlobBeforeUpsertHooks []StoreFileBlobHook
var storeFileBlobAfterUpsertHooks []StoreFileBlobHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *StoreFileBlob) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range storeFileBlobAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *StoreFileBlob) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range storeFileBlobBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *StoreFileBlob) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range storeFileBlobAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *StoreFileBlob) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range storeFileBlobBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *StoreFileBlob) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range storeFileBlobAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *StoreFileBlob) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range storeFileBlobBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *StoreFileBlob) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range storeFileBlobAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *StoreFileBlob) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range storeFileBlobBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *StoreFileBlob) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range storeFileBlobAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddStoreFileBlobHook registers your hook function for all future operations.
func AddStoreFileBlobHook(hookPoint boil.HookPoint, storeFileBlobHook StoreFileBlobHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		storeFileBlobAfterSelectHooks = append(storeFileBlobAfterSelectHooks, storeFileBlobHook)
	case boil.BeforeInsertHook:
		storeFileBlobBeforeInsertHooks = append(storeFileBlobBeforeInsertHooks, storeFileBlobHook)
	case boil.AfterInsertHook:
		storeFileBlobAfterInsertHooks = append(storeFileBlobAfterInsertHooks, storeFileBlobHook)
	case boil.BeforeUpdateHook:
		storeFileBlobBeforeUpdateHooks = append(storeFileBlobBeforeUpdateHooks, storeFileBlobHook)
	case boil.AfterUpdateHook:
		storeFileBlobAfterUpdateHooks = append(storeFileBlobAfterUpdateHooks, storeFileBlobHook)
	case boil.BeforeDeleteHook:
		storeFileBlobBeforeDeleteHooks = append(storeFileBlobBeforeDeleteHooks, storeFileBlobHook)
	case boil.AfterDeleteHook:
		storeFileBlobAfterDeleteHooks = append(storeFileBlobAfterDeleteHooks, storeFileBlobHook)
	case boil.BeforeUpsertHook:
		storeFileBlobBeforeUpsertHooks = append(storeFileBlobBeforeUpsertHooks, storeFileBlobHook)
	case boil.AfterUpsertHook:
		storeFileBlobAfterUpsertHooks = append(storeFileBlobAfterUpsertHooks, storeFileBlobHook)
	}
}

// One returns a single storeFileBlob record from the query.
func (q storeFileBlobQuery) One(ctx context.Context, exec boil.ContextExecutor) (*StoreFileBlob, error) {
	o := &StoreFileBlob{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for store_file_blobs")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all StoreFileBlob records from the query.
func (q storeFileBlobQuery) All(ctx context.Context, exec boil.ContextExecutor) (StoreFileBlobSlice, error) {
	var o []*StoreFileBlob

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to StoreFileBlob slice")
	}

	if len(storeFileBlobAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all StoreFileBlob records in the query.
func (q storeFileBlobQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count store_file_blobs rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q storeFileBlobQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if store_file_blobs exists")
	}

	return count > 0, nil
}

// File pointed to by the foreign key.
func (o *StoreFileBlob) File(mods ...qm.QueryMod) storeFileQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"file_id\" = ?", o.FileID),
	}

	queryMods = append(queryMods, mods...)

	return StoreFiles(queryMods...)
}

// BlobStoreUploadFiles retrieves all the store_upload_file's StoreUploadFiles with an executor via blob_id column.
func (o *StoreFileBlob) BlobStoreUploadFiles(mods ...qm.QueryMod) storeUploadFileQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"cloud_symbol_server\".\"store_upload_files\".\"blob_id\"=?", o.BlobID),
	)

	return StoreUploadFiles(queryMods...)
}

// LoadFile allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (storeFileBlobL) LoadFile(ctx context.Context, e boil.ContextExecutor, singular bool, maybeStoreFileBlob interface{}, mods queries.Applicator) error {
	var slice []*StoreFileBlob
	var object *StoreFileBlob

	if singular {
		var ok bool
		object, ok = maybeStoreFileBlob.(*StoreFileBlob)
		if !ok {
			object = new(StoreFileBlob)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeStoreFileBlob)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeStoreFileBlob))
			}
		}
	} else {
		s, ok := maybeStoreFileBlob.(*[]*StoreFileBlob)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeStoreFileBlob)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeStoreFileBlob))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &storeFileBlobR{}
		}
		if !queries.IsNil(object.FileID) {
			args = append(args, object.FileID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &storeFileBlobR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.FileID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.FileID) {
				args = append(args, obj.FileID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`cloud_symbol_server.store_files`),
		qm.WhereIn(`cloud_symbol_server.store_files.file_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load StoreFile")
	}

	var resultSlice []*StoreFile
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice StoreFile")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for store_files")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for store_files")
	}

	if len(storeFileBlobAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.File = foreign
		if foreign.R == nil {
			foreign.R = &storeFileR{}
		}
		foreign.R.FileStoreFileBlobs = append(foreign.R.FileStoreFileBlobs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.FileID, foreign.FileID) {
				local.R.File = foreign
				if foreign.R == nil {
					foreign.R = &storeFileR{}
				}
				foreign.R.FileStoreFileBlobs = append(foreign.R.FileStoreFileBlobs, local)
				break
			}
		}
	}

	return nil
}

// LoadBlobStoreUploadFiles allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (storeFileBlobL) LoadBlobStoreUploadFiles(ctx context.Context, e boil.ContextExecutor, singular bool, maybeStoreFileBlob interface{}, mods queries.Applicator) error {
	var slice []*StoreFileBlob
	var object *StoreFileBlob

	if singular {
		var ok bool
		object, ok = maybeStoreFileBlob.(*StoreFileBlob)
		if !ok {
			object = new(StoreFileBlob)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeStoreFileBlob)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeStoreFileBlob))
			}
		}
	} else {
		s, ok := maybeStoreFileBlob.(*[]*StoreFileBlob)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeStoreFileBlob)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeStoreFileBlob))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &storeFileBlobR{}
		}
		args = append(args, object.BlobID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &storeFileBlobR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.BlobID) {
					continue Outer
				}
			}

			args = append(args, obj.BlobID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`cloud_symbol_server.store_upload_files`),
		qm.WhereIn(`cloud_symbol_server.store_upload_files.blob_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load store_upload_files")
	}

	var resultSlice []*StoreUploadFile
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice store_upload_files")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on store_upload_files")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for store_upload_files")
	}

	if len(storeUploadFileAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BlobStoreUploadFiles = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &storeUploadFileR{}
			}
			foreign.R.Blob = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.BlobID, foreign.BlobID) {
				local.R.BlobStoreUploadFiles = append(local.R.BlobStoreUploadFiles, foreign)
				if foreign.R == nil {
					foreign.R = &storeUploadFileR{}
				}
				foreign.R.Blob = local
				break
			}
		}
	}

	return nil
}

// SetFile of the storeFileBlob to the related item.
// Sets o.R.File to related.
// Adds o to related.R.FileStoreFileBlobs.
func (o *StoreFileBlob) SetFile(ctx context.Context, exec boil.ContextExecutor, insert bool, related *StoreFile) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"cloud_symbol_server\".\"store_file_blobs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"file_id"}),
		strmangle.WhereClause("\"", "\"", 2, storeFileBlobPrimaryKeyColumns),
	)
	values := []interface{}{related.FileID, o.BlobID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.FileID, related.FileID)
	if o.R == nil {
		o.R = &storeFileBlobR{
			File: related,
		}
	} else {
		o.R.File = related
	}

	if related.R == nil {
		related.R = &storeFileR{
			FileStoreFileBlobs: StoreFileBlobSlice{o},
		}
	} else {
		related.R.FileStoreFileBlobs = append(related.R.FileStoreFileBlobs, o)
	}

	return nil
}

// RemoveFile relationship.
// Sets o.R.File to nil.
// Removes o from all passed in related items' relationships struct.
func (o *StoreFileBlob) RemoveFile(ctx context.Context, exec boil.ContextExecutor, related *StoreFile) error {
	var err error

	queries.SetScanner(&o.FileID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("file_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.File = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.FileStoreFileBlobs {
		if queries.Equal(o.FileID, ri.FileID) {
			continue
		}

		ln := len(related.R.FileStoreFileBlobs)
		if ln > 1 && i < ln-1 {
			related.R.FileStoreFileBlobs[i] = related.R.FileStoreFileBlobs[ln-1]
		}
		related.R.FileStoreFileBlobs = related.R.FileStoreFileBlobs[:ln-1]
		break
	}
	return nil
}

// AddBlobStoreUploadFiles adds the given related objects to the existing relationships
// of the store_file_blob, optionally inserting them as new records.
// Appends related to o.R.BlobStoreUploadFiles.
// Sets related.R.Blob appropriately.
func (o *StoreFileBlob) AddBlobStoreUploadFiles(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*StoreUploadFile) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.BlobID, o.BlobID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"cloud_symbol_server\".\"store_upload_files\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"blob_id"}),
				strmangle.WhereClause("\"", "\"", 2, storeUploadFilePrimaryKeyColumns),
			)
			values := []interface{}{o.BlobID, rel.FileID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.BlobID, o.BlobID)
		}
	}

	if o.R == nil {
		o.R = &storeFileBlobR{
			BlobStoreUploadFiles: related,
		}
	} else {
		o.R.BlobStoreUploadFiles = append(o.R.BlobStoreUploadFiles, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &storeUploadFileR{
				Blob: o,
			}
		} else {
			rel.R.Blob = o
		}
	}
	return nil
}

// SetBlobStoreUploadFiles removes all previously related items of the
// store_file_blob replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Blob's BlobStoreUploadFiles accordingly.
// Replaces o.R.BlobStoreUploadFiles with related.
// Sets related.R.Blob's BlobStoreUploadFiles accordingly.
func (o *StoreFileBlob) SetBlobStoreUploadFiles(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*StoreUploadFile) error {
	query := "update \"cloud_symbol_server\".\"store_upload_files\" set \"blob_id\" = null where \"blob_id\" = $1"
	values := []interface{}{o.BlobID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.BlobStoreUploadFiles {
			queries.SetScanner(&rel.BlobID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Blob = nil
		}
		o.R.BlobStoreUploadFiles = nil
	}

	return o.AddBlobStoreUploadFiles(ctx, exec, insert, related...)
}

// RemoveBlobStoreUploadFiles relationships from objects passed in.
// Removes related items from R.BlobStoreUploadFiles (uses pointer comparison, removal does not keep order)
// Sets related.R.Blob.
func (o *StoreFileBlob) RemoveBlobStoreUploadFiles(ctx context.Context, exec boil.ContextExecutor, related ...*StoreUploadFile) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.BlobID, nil)
		if rel.R != nil {
			rel.R.Blob = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("blob_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.BlobStoreUploadFiles {
			if rel != ri {
				continue
			}

			ln := len(o.R.BlobStoreUploadFiles)
			if ln > 1 && i < ln-1 {
				o.R.BlobStoreUploadFiles[i] = o.R.BlobStoreUploadFiles[ln-1]
			}
			o.R.BlobStoreUploadFiles = o.R.BlobStoreUploadFiles[:ln-1]
			break
		}
	}

	return nil
}

// StoreFileBlobs retrieves all the records using an executor.
func StoreFileBlobs(mods ...qm.QueryMod) storeFileBlobQuery {
	mods = append(mods, qm.From("\"cloud_symbol_server\".\"store_file_blobs\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"cloud_symbol_server\".\"store_file_blobs\".*"})
	}

	return storeFileBlobQuery{q}
}

// FindStoreFileBlob retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindStoreFileBlob(ctx context.Context, exec boil.ContextExecutor, blobID int, selectCols ...string) (*StoreFileBlob, error) {
	storeFileBlobObj := &StoreFileBlob{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"cloud_symbol_server\".\"store_file_blobs\" where \"blob_id\"=$1", sel,
	)

	q := queries.Raw(query, blobID)

	err := q.Bind(ctx, exec, storeFileBlobObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from store_file_blobs")
	}

	if err = storeFileBlobObj.doAfterSelectHooks(ctx, exec); err != nil {
		return storeFileBlobObj, err
	}

	return storeFileBlobObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *StoreFileBlob) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no store_file_blobs provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(storeFileBlobColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	storeFileBlobInsertCacheMut.RLock()
	cache, cached := storeFileBlobInsertCache[key]
	storeFileBlobInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			storeFileBlobAllColumns,
			storeFileBlobColumnsWithDefault,
			storeFileBlobColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, storeFileBlobGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(storeFileBlobType, storeFileBlobMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(storeFileBlobType, storeFileBlobMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"cloud_symbol_server\".\"store_file_blobs\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"cloud_symbol_server\".\"store_file_blobs\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into store_file_blobs")
	}

	if !cached {
		storeFileBlobInsertCacheMut.Lock()
		storeFileBlobInsertCache[key] = cache
		storeFileBlobInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the StoreFileBlob.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *StoreFileBlob) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	storeFileBlobUpdateCacheMut.RLock()
	cache, cached := storeFileBlobUpdateCache[key]
	storeFileBlobUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			storeFileBlobAllColumns,
			storeFileBlobPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, storeFileBlobGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update store_file_blobs, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"cloud_symbol_server\".\"store_file_blobs\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, storeFileBlobPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(storeFileBlobType, storeFileBlobMapping, append(wl, storeFileBlobPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update store_file_blobs row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for store_file_blobs")
	}

	if !cached {
		storeFileBlobUpdateCacheMut.Lock()
		storeFileBlobUpdateCache[key] = cache
		storeFileBlobUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q storeFileBlobQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for store_file_blobs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for store_file_blobs")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o StoreFileBlobSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), storeFileBlobPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"cloud_symbol_server\".\"store_file_blobs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, storeFileBlobPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in storeFileBlob slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all storeFileBlob")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *StoreFileBlob) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no store_file_blobs provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(storeFileBlobColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	storeFileBlobUpsertCacheMut.RLock()
	cache, cached := storeFileBlobUpsertCache[key]
	storeFileBlobUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			storeFileBlobAllColumns,
			storeFileBlobColumnsWithDefault,
			storeFileBlobColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			storeFileBlobAllColumns,
			storeFileBlobPrimaryKeyColumns,
		)

		insert = strmangle.SetComplement(insert, storeFileBlobGeneratedColumns)
		update = strmangle.SetComplement(update, storeFileBlobGeneratedColumns)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert store_file_blobs, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(storeFileBlobPrimaryKeyColumns))
			copy(conflict, storeFileBlobPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"cloud_symbol_server\".\"store_file_blobs\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(storeFileBlobType, storeFileBlobMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(storeFileBlobType, storeFileBlobMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert store_file_blobs")
	}

	if !cached {
		storeFileBlobUpsertCacheMut.Lock()
		storeFileBlobUpsertCache[key] = cache
		storeFileBlobUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single StoreFileBlob record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *StoreFileBlob) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no StoreFileBlob provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), storeFileBlobPrimaryKeyMapping)
	sql := "DELETE FROM \"cloud_symbol_server\".\"store_file_blobs\" WHERE \"blob_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from store_file_blobs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for store_file_blobs")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q storeFileBlobQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no storeFileBlobQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from store_file_blobs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for store_file_blobs")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o StoreFileBlobSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(storeFileBlobBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), storeFileBlobPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"cloud_symbol_server\".\"store_file_blobs\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, storeFileBlobPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from storeFileBlob slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for store_file_blobs")
	}

	if len(storeFileBlobAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *StoreFileBlob) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindStoreFileBlob(ctx, exec, o.BlobID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *StoreFileBlobSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := StoreFileBlobSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), storeFileBlobPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"cloud_symbol_server\".\"store_file_blobs\".* FROM \"cloud_symbol_server\".\"store_file_blobs\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, storeFileBlobPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in StoreFileBlobSlice")
	}

	*o = slice

	return nil
}

// StoreFileBlobExists checks if the StoreFileBlob row exists.
func StoreFileBlobExists(ctx context.Context, exec boil.ContextExecutor, blobID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"cloud_symbol_server\".\"store_file_blobs\" where \"blob_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, blobID)
	}
	row := exec.QueryRowContext(ctx, sql, blobID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if store_file_blobs exists")
	}

	return exists, nil
}
