// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// PersonalAccessToken is an object representing the database table.
type PersonalAccessToken struct {
	PatID             int       `boil:"pat_id" json:"pat_id" toml:"pat_id" yaml:"pat_id"`
	Owner             string    `boil:"owner" json:"owner" toml:"owner" yaml:"owner"`
	Token             string    `boil:"token" json:"token" toml:"token" yaml:"token"`
	Description       string    `boil:"description" json:"description" toml:"description" yaml:"description"`
	CreationTimestamp time.Time `boil:"creation_timestamp" json:"creation_timestamp" toml:"creation_timestamp" yaml:"creation_timestamp"`

	R *personalAccessTokenR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L personalAccessTokenL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PersonalAccessTokenColumns = struct {
	PatID             string
	Owner             string
	Token             string
	Description       string
	CreationTimestamp string
}{
	PatID:             "pat_id",
	Owner:             "owner",
	Token:             "token",
	Description:       "description",
	CreationTimestamp: "creation_timestamp",
}

var PersonalAccessTokenTableColumns = struct {
	PatID             string
	Owner             string
	Token             string
	Description       string
	CreationTimestamp string
}{
	PatID:             "personal_access_tokens.pat_id",
	Owner:             "personal_access_tokens.owner",
	Token:             "personal_access_tokens.token",
	Description:       "personal_access_tokens.description",
	CreationTimestamp: "personal_access_tokens.creation_timestamp",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var PersonalAccessTokenWhere = struct {
	PatID             whereHelperint
	Owner             whereHelperstring
	Token             whereHelperstring
	Description       whereHelperstring
	CreationTimestamp whereHelpertime_Time
}{
	PatID:             whereHelperint{field: "\"cloud_symbol_server\".\"personal_access_tokens\".\"pat_id\""},
	Owner:             whereHelperstring{field: "\"cloud_symbol_server\".\"personal_access_tokens\".\"owner\""},
	Token:             whereHelperstring{field: "\"cloud_symbol_server\".\"personal_access_tokens\".\"token\""},
	Description:       whereHelperstring{field: "\"cloud_symbol_server\".\"personal_access_tokens\".\"description\""},
	CreationTimestamp: whereHelpertime_Time{field: "\"cloud_symbol_server\".\"personal_access_tokens\".\"creation_timestamp\""},
}

// PersonalAccessTokenRels is where relationship names are stored.
var PersonalAccessTokenRels = struct {
}{}

// personalAccessTokenR is where relationships are stored.
type personalAccessTokenR struct {
}

// NewStruct creates a new relationship struct
func (*personalAccessTokenR) NewStruct() *personalAccessTokenR {
	return &personalAccessTokenR{}
}

// personalAccessTokenL is where Load methods for each relationship are stored.
type personalAccessTokenL struct{}

var (
	personalAccessTokenAllColumns            = []string{"pat_id", "owner", "token", "description", "creation_timestamp"}
	personalAccessTokenColumnsWithoutDefault = []string{"owner", "token", "description", "creation_timestamp"}
	personalAccessTokenColumnsWithDefault    = []string{"pat_id"}
	personalAccessTokenPrimaryKeyColumns     = []string{"pat_id"}
	personalAccessTokenGeneratedColumns      = []string{"pat_id"}
)

type (
	// PersonalAccessTokenSlice is an alias for a slice of pointers to PersonalAccessToken.
	// This should almost always be used instead of []PersonalAccessToken.
	PersonalAccessTokenSlice []*PersonalAccessToken
	// PersonalAccessTokenHook is the signature for custom PersonalAccessToken hook methods
	PersonalAccessTokenHook func(context.Context, boil.ContextExecutor, *PersonalAccessToken) error

	personalAccessTokenQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	personalAccessTokenType                 = reflect.TypeOf(&PersonalAccessToken{})
	personalAccessTokenMapping              = queries.MakeStructMapping(personalAccessTokenType)
	personalAccessTokenPrimaryKeyMapping, _ = queries.BindMapping(personalAccessTokenType, personalAccessTokenMapping, personalAccessTokenPrimaryKeyColumns)
	personalAccessTokenInsertCacheMut       sync.RWMutex
	personalAccessTokenInsertCache          = make(map[string]insertCache)
	personalAccessTokenUpdateCacheMut       sync.RWMutex
	personalAccessTokenUpdateCache          = make(map[string]updateCache)
	personalAccessTokenUpsertCacheMut       sync.RWMutex
	personalAccessTokenUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var personalAccessTokenAfterSelectHooks []PersonalAccessTokenHook

var personalAccessTokenBeforeInsertHooks []PersonalAccessTokenHook
var personalAccessTokenAfterInsertHooks []PersonalAccessTokenHook

var personalAccessTokenBeforeUpdateHooks []PersonalAccessTokenHook
var personalAccessTokenAfterUpdateHooks []PersonalAccessTokenHook

var personalAccessTokenBeforeDeleteHooks []PersonalAccessTokenHook
var personalAccessTokenAfterDeleteHooks []PersonalAccessTokenHook

var personalAccessTokenBeforeUpsertHooks []PersonalAccessTokenHook
var personalAccessTokenAfterUpsertHooks []PersonalAccessTokenHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PersonalAccessToken) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range personalAccessTokenAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PersonalAccessToken) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range personalAccessTokenBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PersonalAccessToken) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range personalAccessTokenAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PersonalAccessToken) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range personalAccessTokenBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PersonalAccessToken) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range personalAccessTokenAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PersonalAccessToken) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range personalAccessTokenBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PersonalAccessToken) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range personalAccessTokenAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PersonalAccessToken) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range personalAccessTokenBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PersonalAccessToken) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range personalAccessTokenAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPersonalAccessTokenHook registers your hook function for all future operations.
func AddPersonalAccessTokenHook(hookPoint boil.HookPoint, personalAccessTokenHook PersonalAccessTokenHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		personalAccessTokenAfterSelectHooks = append(personalAccessTokenAfterSelectHooks, personalAccessTokenHook)
	case boil.BeforeInsertHook:
		personalAccessTokenBeforeInsertHooks = append(personalAccessTokenBeforeInsertHooks, personalAccessTokenHook)
	case boil.AfterInsertHook:
		personalAccessTokenAfterInsertHooks = append(personalAccessTokenAfterInsertHooks, personalAccessTokenHook)
	case boil.BeforeUpdateHook:
		personalAccessTokenBeforeUpdateHooks = append(personalAccessTokenBeforeUpdateHooks, personalAccessTokenHook)
	case boil.AfterUpdateHook:
		personalAccessTokenAfterUpdateHooks = append(personalAccessTokenAfterUpdateHooks, personalAccessTokenHook)
	case boil.BeforeDeleteHook:
		personalAccessTokenBeforeDeleteHooks = append(personalAccessTokenBeforeDeleteHooks, personalAccessTokenHook)
	case boil.AfterDeleteHook:
		personalAccessTokenAfterDeleteHooks = append(personalAccessTokenAfterDeleteHooks, personalAccessTokenHook)
	case boil.BeforeUpsertHook:
		personalAccessTokenBeforeUpsertHooks = append(personalAccessTokenBeforeUpsertHooks, personalAccessTokenHook)
	case boil.AfterUpsertHook:
		personalAccessTokenAfterUpsertHooks = append(personalAccessTokenAfterUpsertHooks, personalAccessTokenHook)
	}
}

// One returns a single personalAccessToken record from the query.
func (q personalAccessTokenQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PersonalAccessToken, error) {
	o := &PersonalAccessToken{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for personal_access_tokens")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PersonalAccessToken records from the query.
func (q personalAccessTokenQuery) All(ctx context.Context, exec boil.ContextExecutor) (PersonalAccessTokenSlice, error) {
	var o []*PersonalAccessToken

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to PersonalAccessToken slice")
	}

	if len(personalAccessTokenAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PersonalAccessToken records in the query.
func (q personalAccessTokenQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count personal_access_tokens rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q personalAccessTokenQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if personal_access_tokens exists")
	}

	return count > 0, nil
}

// PersonalAccessTokens retrieves all the records using an executor.
func PersonalAccessTokens(mods ...qm.QueryMod) personalAccessTokenQuery {
	mods = append(mods, qm.From("\"cloud_symbol_server\".\"personal_access_tokens\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"cloud_symbol_server\".\"personal_access_tokens\".*"})
	}

	return personalAccessTokenQuery{q}
}

// FindPersonalAccessToken retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPersonalAccessToken(ctx context.Context, exec boil.ContextExecutor, patID int, selectCols ...string) (*PersonalAccessToken, error) {
	personalAccessTokenObj := &PersonalAccessToken{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"cloud_symbol_server\".\"personal_access_tokens\" where \"pat_id\"=$1", sel,
	)

	q := queries.Raw(query, patID)

	err := q.Bind(ctx, exec, personalAccessTokenObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from personal_access_tokens")
	}

	if err = personalAccessTokenObj.doAfterSelectHooks(ctx, exec); err != nil {
		return personalAccessTokenObj, err
	}

	return personalAccessTokenObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PersonalAccessToken) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no personal_access_tokens provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(personalAccessTokenColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	personalAccessTokenInsertCacheMut.RLock()
	cache, cached := personalAccessTokenInsertCache[key]
	personalAccessTokenInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			personalAccessTokenAllColumns,
			personalAccessTokenColumnsWithDefault,
			personalAccessTokenColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, personalAccessTokenGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(personalAccessTokenType, personalAccessTokenMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(personalAccessTokenType, personalAccessTokenMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"cloud_symbol_server\".\"personal_access_tokens\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"cloud_symbol_server\".\"personal_access_tokens\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into personal_access_tokens")
	}

	if !cached {
		personalAccessTokenInsertCacheMut.Lock()
		personalAccessTokenInsertCache[key] = cache
		personalAccessTokenInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the PersonalAccessToken.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PersonalAccessToken) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	personalAccessTokenUpdateCacheMut.RLock()
	cache, cached := personalAccessTokenUpdateCache[key]
	personalAccessTokenUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			personalAccessTokenAllColumns,
			personalAccessTokenPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, personalAccessTokenGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update personal_access_tokens, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"cloud_symbol_server\".\"personal_access_tokens\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, personalAccessTokenPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(personalAccessTokenType, personalAccessTokenMapping, append(wl, personalAccessTokenPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update personal_access_tokens row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for personal_access_tokens")
	}

	if !cached {
		personalAccessTokenUpdateCacheMut.Lock()
		personalAccessTokenUpdateCache[key] = cache
		personalAccessTokenUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q personalAccessTokenQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for personal_access_tokens")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for personal_access_tokens")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PersonalAccessTokenSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), personalAccessTokenPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"cloud_symbol_server\".\"personal_access_tokens\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, personalAccessTokenPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in personalAccessToken slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all personalAccessToken")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PersonalAccessToken) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no personal_access_tokens provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(personalAccessTokenColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	personalAccessTokenUpsertCacheMut.RLock()
	cache, cached := personalAccessTokenUpsertCache[key]
	personalAccessTokenUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			personalAccessTokenAllColumns,
			personalAccessTokenColumnsWithDefault,
			personalAccessTokenColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			personalAccessTokenAllColumns,
			personalAccessTokenPrimaryKeyColumns,
		)

		insert = strmangle.SetComplement(insert, personalAccessTokenGeneratedColumns)
		update = strmangle.SetComplement(update, personalAccessTokenGeneratedColumns)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert personal_access_tokens, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(personalAccessTokenPrimaryKeyColumns))
			copy(conflict, personalAccessTokenPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"cloud_symbol_server\".\"personal_access_tokens\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(personalAccessTokenType, personalAccessTokenMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(personalAccessTokenType, personalAccessTokenMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert personal_access_tokens")
	}

	if !cached {
		personalAccessTokenUpsertCacheMut.Lock()
		personalAccessTokenUpsertCache[key] = cache
		personalAccessTokenUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single PersonalAccessToken record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PersonalAccessToken) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no PersonalAccessToken provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), personalAccessTokenPrimaryKeyMapping)
	sql := "DELETE FROM \"cloud_symbol_server\".\"personal_access_tokens\" WHERE \"pat_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from personal_access_tokens")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for personal_access_tokens")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q personalAccessTokenQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no personalAccessTokenQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from personal_access_tokens")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for personal_access_tokens")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PersonalAccessTokenSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(personalAccessTokenBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), personalAccessTokenPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"cloud_symbol_server\".\"personal_access_tokens\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, personalAccessTokenPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from personalAccessToken slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for personal_access_tokens")
	}

	if len(personalAccessTokenAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PersonalAccessToken) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPersonalAccessToken(ctx, exec, o.PatID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PersonalAccessTokenSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PersonalAccessTokenSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), personalAccessTokenPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"cloud_symbol_server\".\"personal_access_tokens\".* FROM \"cloud_symbol_server\".\"personal_access_tokens\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, personalAccessTokenPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PersonalAccessTokenSlice")
	}

	*o = slice

	return nil
}

// PersonalAccessTokenExists checks if the PersonalAccessToken row exists.
func PersonalAccessTokenExists(ctx context.Context, exec boil.ContextExecutor, patID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"cloud_symbol_server\".\"personal_access_tokens\" where \"pat_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, patID)
	}
	row := exec.QueryRowContext(ctx, sql, patID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if personal_access_tokens exists")
	}

	return exists, nil
}
