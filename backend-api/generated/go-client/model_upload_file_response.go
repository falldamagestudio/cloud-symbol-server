/*
Cloud Symbol Server Admin API

This is the API that is used to manage stores and uploads in Cloud Symbol Server

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// UploadFileResponse struct for UploadFileResponse
type UploadFileResponse struct {
	FileName string `json:"fileName"`
	Hash string `json:"hash"`
	// Short-lived signed URL where the client should upload the file to, or blank if the file already exists in the storage backend
	Url *string `json:"url,omitempty"`
}

// NewUploadFileResponse instantiates a new UploadFileResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUploadFileResponse(fileName string, hash string) *UploadFileResponse {
	this := UploadFileResponse{}
	this.FileName = fileName
	this.Hash = hash
	return &this
}

// NewUploadFileResponseWithDefaults instantiates a new UploadFileResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUploadFileResponseWithDefaults() *UploadFileResponse {
	this := UploadFileResponse{}
	return &this
}

// GetFileName returns the FileName field value
func (o *UploadFileResponse) GetFileName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FileName
}

// GetFileNameOk returns a tuple with the FileName field value
// and a boolean to check if the value has been set.
func (o *UploadFileResponse) GetFileNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.FileName, true
}

// SetFileName sets field value
func (o *UploadFileResponse) SetFileName(v string) {
	o.FileName = v
}

// GetHash returns the Hash field value
func (o *UploadFileResponse) GetHash() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Hash
}

// GetHashOk returns a tuple with the Hash field value
// and a boolean to check if the value has been set.
func (o *UploadFileResponse) GetHashOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Hash, true
}

// SetHash sets field value
func (o *UploadFileResponse) SetHash(v string) {
	o.Hash = v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *UploadFileResponse) GetUrl() string {
	if o == nil || isNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UploadFileResponse) GetUrlOk() (*string, bool) {
	if o == nil || isNil(o.Url) {
    return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *UploadFileResponse) HasUrl() bool {
	if o != nil && !isNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *UploadFileResponse) SetUrl(v string) {
	o.Url = &v
}

func (o UploadFileResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["fileName"] = o.FileName
	}
	if true {
		toSerialize["hash"] = o.Hash
	}
	if !isNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	return json.Marshal(toSerialize)
}

type NullableUploadFileResponse struct {
	value *UploadFileResponse
	isSet bool
}

func (v NullableUploadFileResponse) Get() *UploadFileResponse {
	return v.value
}

func (v *NullableUploadFileResponse) Set(val *UploadFileResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableUploadFileResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableUploadFileResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUploadFileResponse(val *UploadFileResponse) *NullableUploadFileResponse {
	return &NullableUploadFileResponse{value: val, isSet: true}
}

func (v NullableUploadFileResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUploadFileResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


