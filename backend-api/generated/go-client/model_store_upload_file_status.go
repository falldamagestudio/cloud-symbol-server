/*
Cloud Symbol Server Admin API

This is the API that is used to manage stores and uploads in Cloud Symbol Server

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// StoreUploadFileStatus the model 'StoreUploadFileStatus'
type StoreUploadFileStatus string

// List of storeUploadFileStatus
const (
	STOREUPLOADFILESTATUS_UNKNOWN StoreUploadFileStatus = "unknown"
	STOREUPLOADFILESTATUS_ALREADY_PRESENT StoreUploadFileStatus = "already_present"
	STOREUPLOADFILESTATUS_PENDING StoreUploadFileStatus = "pending"
	STOREUPLOADFILESTATUS_COMPLETED StoreUploadFileStatus = "completed"
	STOREUPLOADFILESTATUS_ABORTED StoreUploadFileStatus = "aborted"
	STOREUPLOADFILESTATUS_EXPIRED StoreUploadFileStatus = "expired"
)

// All allowed values of StoreUploadFileStatus enum
var AllowedStoreUploadFileStatusEnumValues = []StoreUploadFileStatus{
	"unknown",
	"already_present",
	"pending",
	"completed",
	"aborted",
	"expired",
}

func (v *StoreUploadFileStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := StoreUploadFileStatus(value)
	for _, existing := range AllowedStoreUploadFileStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid StoreUploadFileStatus", value)
}

// NewStoreUploadFileStatusFromValue returns a pointer to a valid StoreUploadFileStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewStoreUploadFileStatusFromValue(v string) (*StoreUploadFileStatus, error) {
	ev := StoreUploadFileStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for StoreUploadFileStatus: valid values are %v", v, AllowedStoreUploadFileStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v StoreUploadFileStatus) IsValid() bool {
	for _, existing := range AllowedStoreUploadFileStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to storeUploadFileStatus value
func (v StoreUploadFileStatus) Ptr() *StoreUploadFileStatus {
	return &v
}

type NullableStoreUploadFileStatus struct {
	value *StoreUploadFileStatus
	isSet bool
}

func (v NullableStoreUploadFileStatus) Get() *StoreUploadFileStatus {
	return v.value
}

func (v *NullableStoreUploadFileStatus) Set(val *StoreUploadFileStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableStoreUploadFileStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableStoreUploadFileStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStoreUploadFileStatus(val *StoreUploadFileStatus) *NullableStoreUploadFileStatus {
	return &NullableStoreUploadFileStatus{value: val, isSet: true}
}

func (v NullableStoreUploadFileStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStoreUploadFileStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

