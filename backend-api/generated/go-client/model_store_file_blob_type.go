/*
Cloud Symbol Server Admin API

This is the API that is used to manage stores and uploads in Cloud Symbol Server

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// StoreFileBlobType the model 'StoreFileBlobType'
type StoreFileBlobType string

// List of storeFileBlobType
const (
	STOREFILEBLOBTYPE_UNKNOWN StoreFileBlobType = "unknown"
	STOREFILEBLOBTYPE_PE StoreFileBlobType = "pe"
	STOREFILEBLOBTYPE_PDB StoreFileBlobType = "pdb"
)

// All allowed values of StoreFileBlobType enum
var AllowedStoreFileBlobTypeEnumValues = []StoreFileBlobType{
	"unknown",
	"pe",
	"pdb",
}

func (v *StoreFileBlobType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := StoreFileBlobType(value)
	for _, existing := range AllowedStoreFileBlobTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid StoreFileBlobType", value)
}

// NewStoreFileBlobTypeFromValue returns a pointer to a valid StoreFileBlobType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewStoreFileBlobTypeFromValue(v string) (*StoreFileBlobType, error) {
	ev := StoreFileBlobType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for StoreFileBlobType: valid values are %v", v, AllowedStoreFileBlobTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v StoreFileBlobType) IsValid() bool {
	for _, existing := range AllowedStoreFileBlobTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to storeFileBlobType value
func (v StoreFileBlobType) Ptr() *StoreFileBlobType {
	return &v
}

type NullableStoreFileBlobType struct {
	value *StoreFileBlobType
	isSet bool
}

func (v NullableStoreFileBlobType) Get() *StoreFileBlobType {
	return v.value
}

func (v *NullableStoreFileBlobType) Set(val *StoreFileBlobType) {
	v.value = val
	v.isSet = true
}

func (v NullableStoreFileBlobType) IsSet() bool {
	return v.isSet
}

func (v *NullableStoreFileBlobType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStoreFileBlobType(val *StoreFileBlobType) *NullableStoreFileBlobType {
	return &NullableStoreFileBlobType{value: val, isSet: true}
}

func (v NullableStoreFileBlobType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStoreFileBlobType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

