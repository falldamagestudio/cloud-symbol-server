/*
Cloud Symbol Server Admin API

This is the API that is used to manage stores and uploads in Cloud Symbol Server

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// StoreFileHashStatus the model 'StoreFileHashStatus'
type StoreFileHashStatus string

// List of storeFileHashStatus
const (
	PENDING StoreFileHashStatus = "pending"
	PRESENT StoreFileHashStatus = "present"
)

// All allowed values of StoreFileHashStatus enum
var AllowedStoreFileHashStatusEnumValues = []StoreFileHashStatus{
	"pending",
	"present",
}

func (v *StoreFileHashStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := StoreFileHashStatus(value)
	for _, existing := range AllowedStoreFileHashStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid StoreFileHashStatus", value)
}

// NewStoreFileHashStatusFromValue returns a pointer to a valid StoreFileHashStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewStoreFileHashStatusFromValue(v string) (*StoreFileHashStatus, error) {
	ev := StoreFileHashStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for StoreFileHashStatus: valid values are %v", v, AllowedStoreFileHashStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v StoreFileHashStatus) IsValid() bool {
	for _, existing := range AllowedStoreFileHashStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to storeFileHashStatus value
func (v StoreFileHashStatus) Ptr() *StoreFileHashStatus {
	return &v
}

type NullableStoreFileHashStatus struct {
	value *StoreFileHashStatus
	isSet bool
}

func (v NullableStoreFileHashStatus) Get() *StoreFileHashStatus {
	return v.value
}

func (v *NullableStoreFileHashStatus) Set(val *StoreFileHashStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableStoreFileHashStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableStoreFileHashStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStoreFileHashStatus(val *StoreFileHashStatus) *NullableStoreFileHashStatus {
	return &NullableStoreFileHashStatus{value: val, isSet: true}
}

func (v NullableStoreFileHashStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStoreFileHashStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

