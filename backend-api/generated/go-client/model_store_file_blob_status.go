/*
Cloud Symbol Server Admin API

This is the API that is used to manage stores and uploads in Cloud Symbol Server

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// StoreFileBlobStatus the model 'StoreFileBlobStatus'
type StoreFileBlobStatus string

// List of storeFileBlobStatus
const (
	STOREFILEBLOBSTATUS_PENDING StoreFileBlobStatus = "pending"
	STOREFILEBLOBSTATUS_PRESENT StoreFileBlobStatus = "present"
)

// All allowed values of StoreFileBlobStatus enum
var AllowedStoreFileBlobStatusEnumValues = []StoreFileBlobStatus{
	"pending",
	"present",
}

func (v *StoreFileBlobStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := StoreFileBlobStatus(value)
	for _, existing := range AllowedStoreFileBlobStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid StoreFileBlobStatus", value)
}

// NewStoreFileBlobStatusFromValue returns a pointer to a valid StoreFileBlobStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewStoreFileBlobStatusFromValue(v string) (*StoreFileBlobStatus, error) {
	ev := StoreFileBlobStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for StoreFileBlobStatus: valid values are %v", v, AllowedStoreFileBlobStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v StoreFileBlobStatus) IsValid() bool {
	for _, existing := range AllowedStoreFileBlobStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to storeFileBlobStatus value
func (v StoreFileBlobStatus) Ptr() *StoreFileBlobStatus {
	return &v
}

type NullableStoreFileBlobStatus struct {
	value *StoreFileBlobStatus
	isSet bool
}

func (v NullableStoreFileBlobStatus) Get() *StoreFileBlobStatus {
	return v.value
}

func (v *NullableStoreFileBlobStatus) Set(val *StoreFileBlobStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableStoreFileBlobStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableStoreFileBlobStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStoreFileBlobStatus(val *StoreFileBlobStatus) *NullableStoreFileBlobStatus {
	return &NullableStoreFileBlobStatus{value: val, isSet: true}
}

func (v NullableStoreFileBlobStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStoreFileBlobStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

