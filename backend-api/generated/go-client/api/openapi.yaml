openapi: 3.0.1
info:
  description: This is the API that is used to manage stores and uploads in Cloud
    Symbol Server
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  title: Cloud Symbol Server Admin API
  version: 1.0.0
servers:
- url: /
security:
- emailAndPat: []
paths:
  /tokens:
    get:
      operationId: getTokens
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getTokensResponse'
          description: Success
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/messageResponse'
          description: Not authorized
      summary: Fetch a list of all tokens for current user
    post:
      operationId: createToken
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createTokenResponse'
          description: Success
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/messageResponse'
          description: Not authorized
      summary: Create a new token for current user
  /tokens/{token}:
    delete:
      operationId: deleteToken
      parameters:
      - description: ID of the token to delete
        explode: false
        in: path
        name: token
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: Success
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/messageResponse'
          description: Token does not exist
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/messageResponse'
          description: Not authorized
      summary: Delete a token for current user
    get:
      operationId: getToken
      parameters:
      - description: ID of the token to fetch
        explode: false
        in: path
        name: token
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getTokenResponse'
          description: Success
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/messageResponse'
          description: Token does not exist
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/messageResponse'
          description: Not authorized
      summary: Fetch a token for current user
    put:
      operationId: updateToken
      parameters:
      - description: ID of the token to update
        explode: false
        in: path
        name: token
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateTokenRequest'
        required: true
      responses:
        "200":
          description: Success
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/messageResponse'
          description: Token does not exist
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/messageResponse'
          description: Not authorized
      summary: Update details of a token for current user
  /stores:
    get:
      operationId: getStores
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getStoresResponse'
          description: Success
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/messageResponse'
          description: Not authorized
      summary: Fetch a list of all stores
  /stores/{storeId}:
    delete:
      operationId: deleteStore
      parameters:
      - description: ID of store to delete
        explode: false
        in: path
        name: storeId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: Success
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/messageResponse'
          description: Not authorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/messageResponse'
          description: Store does not exist
      summary: Delete an existing store
    post:
      operationId: createStore
      parameters:
      - description: ID of store to create
        explode: false
        in: path
        name: storeId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: Success
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/messageResponse'
          description: Not authorized
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/messageResponse'
          description: Store already exists
      summary: Create a new store
  /stores/{storeId}/files:
    get:
      operationId: getStoreFiles
      parameters:
      - description: ID of the store containing the files
        explode: false
        in: path
        name: storeId
        required: true
        schema:
          type: string
        style: simple
      - description: How many entries to skip (used for pagination of results)
        explode: true
        in: query
        name: offset
        required: false
        schema:
          default: 0
          minimum: 0
          type: integer
        style: form
      - description: Max number of results to return (used for pagination of results)
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 25
          maximum: 100
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getStoreFilesResponse'
          description: Success
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/messageResponse'
          description: Not authorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/messageResponse'
          description: No such store
      summary: Fetch a list of files in store
  /stores/{storeId}/files/{fileId}/hashes:
    get:
      operationId: getStoreFileHashes
      parameters:
      - description: ID of the store containing the file
        explode: false
        in: path
        name: storeId
        required: true
        schema:
          type: string
        style: simple
      - description: ID of the file
        explode: false
        in: path
        name: fileId
        required: true
        schema:
          type: string
        style: simple
      - description: How many entries to skip (used for pagination of results)
        explode: true
        in: query
        name: offset
        required: false
        schema:
          default: 0
          minimum: 0
          type: integer
        style: form
      - description: Max number of results to return (used for pagination of results)
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 25
          maximum: 100
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getStoreFileHashesResponse'
          description: Success
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/messageResponse'
          description: Not authorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/messageResponse'
          description: No such store
      summary: Fetch a list of hashes for a specific file in store
  /stores/{storeId}/uploads:
    get:
      operationId: getStoreUploads
      parameters:
      - description: ID of the store containing the uploads
        explode: false
        in: path
        name: storeId
        required: true
        schema:
          type: string
        style: simple
      - description: How many entries to skip (used for pagination of results)
        explode: true
        in: query
        name: offset
        required: false
        schema:
          default: 0
          minimum: 0
          type: integer
        style: form
      - description: Max number of results to return (used for pagination of results)
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 25
          maximum: 100
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getStoreUploadsResponse'
          description: Success
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/messageResponse'
          description: Not authorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/messageResponse'
          description: No such store
      summary: Fetch a list of uploads in store
    post:
      operationId: createStoreUpload
      parameters:
      - description: ID of the store containing the upload
        explode: false
        in: path
        name: storeId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createStoreUploadRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createStoreUploadResponse'
          description: Success
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/messageResponse'
          description: Not authorized
      summary: Start a new upload
  /stores/{storeId}/uploads/{uploadId}:
    get:
      operationId: getStoreUpload
      parameters:
      - description: ID of the upload to fetch
        explode: false
        in: path
        name: uploadId
        required: true
        schema:
          type: string
        style: simple
      - description: ID of the store containing the upload
        explode: false
        in: path
        name: storeId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getStoreUploadResponse'
          description: Success
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/messageResponse'
          description: Not authorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/messageResponse'
          description: No such store/upload
      summary: Fetch an upload
  /stores/{storeId}/uploads/{uploadId}/completed:
    post:
      operationId: markStoreUploadCompleted
      parameters:
      - description: ID of the upload to fetch
        explode: false
        in: path
        name: uploadId
        required: true
        schema:
          type: string
        style: simple
      - description: ID of the store containing the upload
        explode: false
        in: path
        name: storeId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: Success
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/messageResponse'
          description: Not authorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/messageResponse'
          description: No such store/upload
      summary: Mark an upload as completed
  /stores/{storeId}/uploads/{uploadId}/aborted:
    post:
      operationId: markStoreUploadAborted
      parameters:
      - description: ID of the upload to mark as aborted
        explode: false
        in: path
        name: uploadId
        required: true
        schema:
          type: string
        style: simple
      - description: ID of the store containing the upload
        explode: false
        in: path
        name: storeId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: Success
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/messageResponse'
          description: Not authorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/messageResponse'
          description: No such store/upload
      summary: Mark an upload as aborted
  /stores/{storeId}/uploads/{uploadId}/expire:
    post:
      operationId: expireStoreUpload
      parameters:
      - description: ID of the upload to fetch
        explode: false
        in: path
        name: uploadId
        required: true
        schema:
          type: string
        style: simple
      - description: ID of the store containing the upload
        explode: false
        in: path
        name: storeId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: Success
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/messageResponse'
          description: Not authorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/messageResponse'
          description: No such store/upload
      summary: Expire store upload and consider files for GC
  /stores/{storeId}/uploads/{uploadId}/files/{fileId}/uploaded:
    post:
      operationId: markStoreUploadFileUploaded
      parameters:
      - description: ID of the upload to fetch
        explode: false
        in: path
        name: uploadId
        required: true
        schema:
          type: string
        style: simple
      - description: ID of the store containing the upload
        explode: false
        in: path
        name: storeId
        required: true
        schema:
          type: string
        style: simple
      - description: Index of the file within the upload that should be marked as
          uploaded
        explode: false
        in: path
        name: fileId
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          description: Success
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/messageResponse'
          description: Not authorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/messageResponse'
          description: No such store/upload/item
      summary: Mark a file within an upload as uploaded
components:
  responses:
    "401":
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/messageResponse'
      description: Not authorized
  schemas:
    storeUploadStatus:
      enum:
      - unknown
      - in_progress
      - completed
      - aborted
      - expired
      example: completed
      type: string
    storeUploadFileStatus:
      enum:
      - unknown
      - already_present
      - pending
      - completed
      - aborted
      - expired
      example: completed
      type: string
    storeFileHashStatus:
      enum:
      - pending
      - present
      type: string
    messageResponse:
      properties:
        message:
          example: Invalid API invocation
          type: string
      required:
      - message
      type: object
    paginationResponse:
      example:
        total: 0
      properties:
        total:
          type: integer
      required:
      - total
      type: object
    getTokensResponse:
      items:
        $ref: '#/components/schemas/getTokenResponse'
      type: array
    createTokenResponse:
      example:
        token: NyXfFDMc3A3KkvVwK5wJcnq9aRqYufgQ
      properties:
        token:
          description: Personal Access Token
          example: NyXfFDMc3A3KkvVwK5wJcnq9aRqYufgQ
          type: string
      required:
      - token
      type: object
    getTokenResponse:
      example:
        creationTimestamp: 2019-10-12T07:20:50.52Z
        description: Used for local testing purposes
        token: NyXfFDMc3A3KkvVwK5wJcnq9aRqYufgQ
      properties:
        token:
          description: Personal Access Token This token can be used for authentication
            when accessing non-token related APIs
          example: NyXfFDMc3A3KkvVwK5wJcnq9aRqYufgQ
          type: string
        description:
          description: Textual description of token Users fill this in to remind themselves
            the purpose of a token and/or where it is used
          example: Used for local testing purposes
          type: string
        creationTimestamp:
          description: "Creation timestamp, in RFC3339 format"
          example: 2019-10-12T07:20:50.52Z
          type: string
      required:
      - creationTimestamp
      - description
      - token
      type: object
    updateTokenRequest:
      properties:
        description:
          description: Textual description of token Users fill this in to remind themselves
            the purpose of a token and/or where it is used
          example: Used for local testing purposes
          type: string
      required:
      - description
      type: object
    getStoresResponse:
      items:
        example: example-store
        type: string
      type: array
    createStoreUploadRequest:
      properties:
        useProgressApi:
          description: "When present and set to true, the client will provide progress\
            \ updates; Legacy clients will create an upload, then upload the required\
            \ files to GCS, without progress/completion callbacks"
          example: true
          type: boolean
        description:
          example: Example application
          type: string
        buildId:
          example: Build 432
          type: string
        files:
          items:
            $ref: '#/components/schemas/createStoreUploadFileRequest'
          type: array
      type: object
    createStoreUploadFileRequest:
      properties:
        fileName:
          example: Application.pdb
          type: string
        hash:
          example: 7F416863ABF34C3E894BAD1739BAA5571
          type: string
      required:
      - fileName
      - hash
      type: object
    getStoreUploadsResponse:
      example:
        pagination:
          total: 0
        uploads:
        - description: Example application
          files:
          - fileName: Application.pdb
            hash: 7F416863ABF34C3E894BAD1739BAA5571
            status: status
          - fileName: Application.pdb
            hash: 7F416863ABF34C3E894BAD1739BAA5571
            status: status
          buildId: Build 432
          timestamp: 2019-10-12T07:20:50.52Z
          status: completed
        - description: Example application
          files:
          - fileName: Application.pdb
            hash: 7F416863ABF34C3E894BAD1739BAA5571
            status: status
          - fileName: Application.pdb
            hash: 7F416863ABF34C3E894BAD1739BAA5571
            status: status
          buildId: Build 432
          timestamp: 2019-10-12T07:20:50.52Z
          status: completed
      properties:
        uploads:
          items:
            $ref: '#/components/schemas/getStoreUploadResponse'
          type: array
        pagination:
          $ref: '#/components/schemas/paginationResponse'
      required:
      - pagination
      - uploads
      type: object
    getStoreFilesResponse:
      example:
        pagination:
          total: 0
        files:
        - files
        - files
      properties:
        files:
          items:
            type: string
          type: array
        pagination:
          $ref: '#/components/schemas/paginationResponse'
      required:
      - files
      - pagination
      type: object
    getStoreFileHashResponse:
      example:
        hash: 7F416863ABF34C3E894BAD1739BAA5571
        status: null
      properties:
        hash:
          example: 7F416863ABF34C3E894BAD1739BAA5571
          type: string
        status:
          $ref: '#/components/schemas/storeFileHashStatus'
      required:
      - hash
      - status
      type: object
    getStoreFileHashesResponse:
      example:
        pagination:
          total: 0
        hashes:
        - hash: 7F416863ABF34C3E894BAD1739BAA5571
          status: null
        - hash: 7F416863ABF34C3E894BAD1739BAA5571
          status: null
      properties:
        hashes:
          items:
            $ref: '#/components/schemas/getStoreFileHashResponse'
          type: array
        pagination:
          $ref: '#/components/schemas/paginationResponse'
      required:
      - hashes
      - pagination
      type: object
    createStoreUploadResponse:
      example:
        files:
        - fileName: Application.pdb
          hash: 7F416863ABF34C3E894BAD1739BAA5571
          url: https://storage.googleapis.com/storage/v1/b/example-bucket/o/stores/default/Application.pdb/7F416863ABF34C3E894BAD1739BAA5571/Application.pdb?GoogleAcountID=123456&Sign=123012301230124012401240124012031021024012401240124012401240241
        - fileName: Application.pdb
          hash: 7F416863ABF34C3E894BAD1739BAA5571
          url: https://storage.googleapis.com/storage/v1/b/example-bucket/o/stores/default/Application.pdb/7F416863ABF34C3E894BAD1739BAA5571/Application.pdb?GoogleAcountID=123456&Sign=123012301230124012401240124012031021024012401240124012401240241
        id: s4elWg054qyrpHCsHqLq
      properties:
        id:
          example: s4elWg054qyrpHCsHqLq
          type: string
        files:
          items:
            $ref: '#/components/schemas/uploadFileResponse'
          type: array
      required:
      - files
      - id
      type: object
    uploadFileResponse:
      example:
        fileName: Application.pdb
        hash: 7F416863ABF34C3E894BAD1739BAA5571
        url: https://storage.googleapis.com/storage/v1/b/example-bucket/o/stores/default/Application.pdb/7F416863ABF34C3E894BAD1739BAA5571/Application.pdb?GoogleAcountID=123456&Sign=123012301230124012401240124012031021024012401240124012401240241
      properties:
        fileName:
          example: Application.pdb
          type: string
        hash:
          example: 7F416863ABF34C3E894BAD1739BAA5571
          type: string
        url:
          description: "Short-lived signed URL where the client should upload the\
            \ file to, or blank if the file already exists in the storage backend"
          example: https://storage.googleapis.com/storage/v1/b/example-bucket/o/stores/default/Application.pdb/7F416863ABF34C3E894BAD1739BAA5571/Application.pdb?GoogleAcountID=123456&Sign=123012301230124012401240124012031021024012401240124012401240241
          type: string
      required:
      - fileName
      - hash
      type: object
    getStoreUploadResponse:
      example:
        description: Example application
        files:
        - fileName: Application.pdb
          hash: 7F416863ABF34C3E894BAD1739BAA5571
          status: status
        - fileName: Application.pdb
          hash: 7F416863ABF34C3E894BAD1739BAA5571
          status: status
        buildId: Build 432
        timestamp: 2019-10-12T07:20:50.52Z
        status: completed
      properties:
        description:
          example: Example application
          type: string
        buildId:
          example: Build 432
          type: string
        timestamp:
          example: 2019-10-12T07:20:50.52Z
          type: string
        files:
          items:
            $ref: '#/components/schemas/getStoreUploadFileResponse'
          type: array
        status:
          $ref: '#/components/schemas/storeUploadStatus'
      required:
      - buildId
      - description
      - files
      - status
      - timestamp
      type: object
    getStoreUploadFileResponse:
      example:
        fileName: Application.pdb
        hash: 7F416863ABF34C3E894BAD1739BAA5571
        status: status
      properties:
        fileName:
          example: Application.pdb
          type: string
        hash:
          example: 7F416863ABF34C3E894BAD1739BAA5571
          type: string
        status:
          $ref: '#/components/schemas/storeUploadFileStatus'
      required:
      - fileName
      - hash
      - status
      type: object
  securitySchemes:
    emailAndPat:
      scheme: basic
      type: http
