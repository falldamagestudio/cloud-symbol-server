/*
Cloud Symbol Server Admin API

This is the API that is used to manage stores and uploads in Cloud Symbol Server

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// UploadFileRequest struct for UploadFileRequest
type UploadFileRequest struct {
	FileName *string `json:"fileName,omitempty"`
	Hash *string `json:"hash,omitempty"`
}

// NewUploadFileRequest instantiates a new UploadFileRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUploadFileRequest() *UploadFileRequest {
	this := UploadFileRequest{}
	return &this
}

// NewUploadFileRequestWithDefaults instantiates a new UploadFileRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUploadFileRequestWithDefaults() *UploadFileRequest {
	this := UploadFileRequest{}
	return &this
}

// GetFileName returns the FileName field value if set, zero value otherwise.
func (o *UploadFileRequest) GetFileName() string {
	if o == nil || isNil(o.FileName) {
		var ret string
		return ret
	}
	return *o.FileName
}

// GetFileNameOk returns a tuple with the FileName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UploadFileRequest) GetFileNameOk() (*string, bool) {
	if o == nil || isNil(o.FileName) {
    return nil, false
	}
	return o.FileName, true
}

// HasFileName returns a boolean if a field has been set.
func (o *UploadFileRequest) HasFileName() bool {
	if o != nil && !isNil(o.FileName) {
		return true
	}

	return false
}

// SetFileName gets a reference to the given string and assigns it to the FileName field.
func (o *UploadFileRequest) SetFileName(v string) {
	o.FileName = &v
}

// GetHash returns the Hash field value if set, zero value otherwise.
func (o *UploadFileRequest) GetHash() string {
	if o == nil || isNil(o.Hash) {
		var ret string
		return ret
	}
	return *o.Hash
}

// GetHashOk returns a tuple with the Hash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UploadFileRequest) GetHashOk() (*string, bool) {
	if o == nil || isNil(o.Hash) {
    return nil, false
	}
	return o.Hash, true
}

// HasHash returns a boolean if a field has been set.
func (o *UploadFileRequest) HasHash() bool {
	if o != nil && !isNil(o.Hash) {
		return true
	}

	return false
}

// SetHash gets a reference to the given string and assigns it to the Hash field.
func (o *UploadFileRequest) SetHash(v string) {
	o.Hash = &v
}

func (o UploadFileRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.FileName) {
		toSerialize["fileName"] = o.FileName
	}
	if !isNil(o.Hash) {
		toSerialize["hash"] = o.Hash
	}
	return json.Marshal(toSerialize)
}

type NullableUploadFileRequest struct {
	value *UploadFileRequest
	isSet bool
}

func (v NullableUploadFileRequest) Get() *UploadFileRequest {
	return v.value
}

func (v *NullableUploadFileRequest) Set(val *UploadFileRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUploadFileRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUploadFileRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUploadFileRequest(val *UploadFileRequest) *NullableUploadFileRequest {
	return &NullableUploadFileRequest{value: val, isSet: true}
}

func (v NullableUploadFileRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUploadFileRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


