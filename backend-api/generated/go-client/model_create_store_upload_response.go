/*
Cloud Symbol Server Admin API

This is the API that is used to manage stores and uploads in Cloud Symbol Server

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// CreateStoreUploadResponse struct for CreateStoreUploadResponse
type CreateStoreUploadResponse struct {
	Id string `json:"id"`
	Files []UploadFileResponse `json:"files"`
}

// NewCreateStoreUploadResponse instantiates a new CreateStoreUploadResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateStoreUploadResponse(id string, files []UploadFileResponse) *CreateStoreUploadResponse {
	this := CreateStoreUploadResponse{}
	this.Id = id
	this.Files = files
	return &this
}

// NewCreateStoreUploadResponseWithDefaults instantiates a new CreateStoreUploadResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateStoreUploadResponseWithDefaults() *CreateStoreUploadResponse {
	this := CreateStoreUploadResponse{}
	return &this
}

// GetId returns the Id field value
func (o *CreateStoreUploadResponse) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *CreateStoreUploadResponse) GetIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *CreateStoreUploadResponse) SetId(v string) {
	o.Id = v
}

// GetFiles returns the Files field value
func (o *CreateStoreUploadResponse) GetFiles() []UploadFileResponse {
	if o == nil {
		var ret []UploadFileResponse
		return ret
	}

	return o.Files
}

// GetFilesOk returns a tuple with the Files field value
// and a boolean to check if the value has been set.
func (o *CreateStoreUploadResponse) GetFilesOk() ([]UploadFileResponse, bool) {
	if o == nil {
    return nil, false
	}
	return o.Files, true
}

// SetFiles sets field value
func (o *CreateStoreUploadResponse) SetFiles(v []UploadFileResponse) {
	o.Files = v
}

func (o CreateStoreUploadResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["files"] = o.Files
	}
	return json.Marshal(toSerialize)
}

type NullableCreateStoreUploadResponse struct {
	value *CreateStoreUploadResponse
	isSet bool
}

func (v NullableCreateStoreUploadResponse) Get() *CreateStoreUploadResponse {
	return v.value
}

func (v *NullableCreateStoreUploadResponse) Set(val *CreateStoreUploadResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateStoreUploadResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateStoreUploadResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateStoreUploadResponse(val *CreateStoreUploadResponse) *NullableCreateStoreUploadResponse {
	return &NullableCreateStoreUploadResponse{value: val, isSet: true}
}

func (v NullableCreateStoreUploadResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateStoreUploadResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


