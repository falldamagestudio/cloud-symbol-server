/*
Cloud Symbol Server Admin API

This is the API that is used to manage stores and uploads in Cloud Symbol Server

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// GetStoreFileBlobResponse struct for GetStoreFileBlobResponse
type GetStoreFileBlobResponse struct {
	BlobIdentifier string `json:"blobIdentifier"`
	// Upload timestamp, in RFC3339 format
	UploadTimestamp string `json:"uploadTimestamp"`
	Type *StoreFileBlobType `json:"type,omitempty"`
	Size *int64 `json:"size,omitempty"`
	ContentHash *string `json:"contentHash,omitempty"`
	Status StoreFileBlobStatus `json:"status"`
}

// NewGetStoreFileBlobResponse instantiates a new GetStoreFileBlobResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetStoreFileBlobResponse(blobIdentifier string, uploadTimestamp string, status StoreFileBlobStatus) *GetStoreFileBlobResponse {
	this := GetStoreFileBlobResponse{}
	this.BlobIdentifier = blobIdentifier
	this.UploadTimestamp = uploadTimestamp
	this.Status = status
	return &this
}

// NewGetStoreFileBlobResponseWithDefaults instantiates a new GetStoreFileBlobResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetStoreFileBlobResponseWithDefaults() *GetStoreFileBlobResponse {
	this := GetStoreFileBlobResponse{}
	return &this
}

// GetBlobIdentifier returns the BlobIdentifier field value
func (o *GetStoreFileBlobResponse) GetBlobIdentifier() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BlobIdentifier
}

// GetBlobIdentifierOk returns a tuple with the BlobIdentifier field value
// and a boolean to check if the value has been set.
func (o *GetStoreFileBlobResponse) GetBlobIdentifierOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.BlobIdentifier, true
}

// SetBlobIdentifier sets field value
func (o *GetStoreFileBlobResponse) SetBlobIdentifier(v string) {
	o.BlobIdentifier = v
}

// GetUploadTimestamp returns the UploadTimestamp field value
func (o *GetStoreFileBlobResponse) GetUploadTimestamp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UploadTimestamp
}

// GetUploadTimestampOk returns a tuple with the UploadTimestamp field value
// and a boolean to check if the value has been set.
func (o *GetStoreFileBlobResponse) GetUploadTimestampOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.UploadTimestamp, true
}

// SetUploadTimestamp sets field value
func (o *GetStoreFileBlobResponse) SetUploadTimestamp(v string) {
	o.UploadTimestamp = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *GetStoreFileBlobResponse) GetType() StoreFileBlobType {
	if o == nil || isNil(o.Type) {
		var ret StoreFileBlobType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetStoreFileBlobResponse) GetTypeOk() (*StoreFileBlobType, bool) {
	if o == nil || isNil(o.Type) {
    return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *GetStoreFileBlobResponse) HasType() bool {
	if o != nil && !isNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given StoreFileBlobType and assigns it to the Type field.
func (o *GetStoreFileBlobResponse) SetType(v StoreFileBlobType) {
	o.Type = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *GetStoreFileBlobResponse) GetSize() int64 {
	if o == nil || isNil(o.Size) {
		var ret int64
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetStoreFileBlobResponse) GetSizeOk() (*int64, bool) {
	if o == nil || isNil(o.Size) {
    return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *GetStoreFileBlobResponse) HasSize() bool {
	if o != nil && !isNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given int64 and assigns it to the Size field.
func (o *GetStoreFileBlobResponse) SetSize(v int64) {
	o.Size = &v
}

// GetContentHash returns the ContentHash field value if set, zero value otherwise.
func (o *GetStoreFileBlobResponse) GetContentHash() string {
	if o == nil || isNil(o.ContentHash) {
		var ret string
		return ret
	}
	return *o.ContentHash
}

// GetContentHashOk returns a tuple with the ContentHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetStoreFileBlobResponse) GetContentHashOk() (*string, bool) {
	if o == nil || isNil(o.ContentHash) {
    return nil, false
	}
	return o.ContentHash, true
}

// HasContentHash returns a boolean if a field has been set.
func (o *GetStoreFileBlobResponse) HasContentHash() bool {
	if o != nil && !isNil(o.ContentHash) {
		return true
	}

	return false
}

// SetContentHash gets a reference to the given string and assigns it to the ContentHash field.
func (o *GetStoreFileBlobResponse) SetContentHash(v string) {
	o.ContentHash = &v
}

// GetStatus returns the Status field value
func (o *GetStoreFileBlobResponse) GetStatus() StoreFileBlobStatus {
	if o == nil {
		var ret StoreFileBlobStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *GetStoreFileBlobResponse) GetStatusOk() (*StoreFileBlobStatus, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *GetStoreFileBlobResponse) SetStatus(v StoreFileBlobStatus) {
	o.Status = v
}

func (o GetStoreFileBlobResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["blobIdentifier"] = o.BlobIdentifier
	}
	if true {
		toSerialize["uploadTimestamp"] = o.UploadTimestamp
	}
	if !isNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !isNil(o.Size) {
		toSerialize["size"] = o.Size
	}
	if !isNil(o.ContentHash) {
		toSerialize["contentHash"] = o.ContentHash
	}
	if true {
		toSerialize["status"] = o.Status
	}
	return json.Marshal(toSerialize)
}

type NullableGetStoreFileBlobResponse struct {
	value *GetStoreFileBlobResponse
	isSet bool
}

func (v NullableGetStoreFileBlobResponse) Get() *GetStoreFileBlobResponse {
	return v.value
}

func (v *NullableGetStoreFileBlobResponse) Set(val *GetStoreFileBlobResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetStoreFileBlobResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetStoreFileBlobResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetStoreFileBlobResponse(val *GetStoreFileBlobResponse) *NullableGetStoreFileBlobResponse {
	return &NullableGetStoreFileBlobResponse{value: val, isSet: true}
}

func (v NullableGetStoreFileBlobResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetStoreFileBlobResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


