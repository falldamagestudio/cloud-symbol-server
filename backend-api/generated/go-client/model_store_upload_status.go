/*
Cloud Symbol Server Admin API

This is the API that is used to manage stores and uploads in Cloud Symbol Server

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// StoreUploadStatus the model 'StoreUploadStatus'
type StoreUploadStatus string

// List of storeUploadStatus
const (
	STOREUPLOADSTATUS_UNKNOWN StoreUploadStatus = "unknown"
	STOREUPLOADSTATUS_IN_PROGRESS StoreUploadStatus = "in_progress"
	STOREUPLOADSTATUS_COMPLETED StoreUploadStatus = "completed"
	STOREUPLOADSTATUS_ABORTED StoreUploadStatus = "aborted"
	STOREUPLOADSTATUS_EXPIRED StoreUploadStatus = "expired"
)

// All allowed values of StoreUploadStatus enum
var AllowedStoreUploadStatusEnumValues = []StoreUploadStatus{
	"unknown",
	"in_progress",
	"completed",
	"aborted",
	"expired",
}

func (v *StoreUploadStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := StoreUploadStatus(value)
	for _, existing := range AllowedStoreUploadStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid StoreUploadStatus", value)
}

// NewStoreUploadStatusFromValue returns a pointer to a valid StoreUploadStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewStoreUploadStatusFromValue(v string) (*StoreUploadStatus, error) {
	ev := StoreUploadStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for StoreUploadStatus: valid values are %v", v, AllowedStoreUploadStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v StoreUploadStatus) IsValid() bool {
	for _, existing := range AllowedStoreUploadStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to storeUploadStatus value
func (v StoreUploadStatus) Ptr() *StoreUploadStatus {
	return &v
}

type NullableStoreUploadStatus struct {
	value *StoreUploadStatus
	isSet bool
}

func (v NullableStoreUploadStatus) Get() *StoreUploadStatus {
	return v.value
}

func (v *NullableStoreUploadStatus) Set(val *StoreUploadStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableStoreUploadStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableStoreUploadStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStoreUploadStatus(val *StoreUploadStatus) *NullableStoreUploadStatus {
	return &NullableStoreUploadStatus{value: val, isSet: true}
}

func (v NullableStoreUploadStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStoreUploadStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

