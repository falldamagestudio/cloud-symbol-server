openapi: 3.0.1

info:
  title: Cloud Symbol Server Admin API
  description: 'This is the API that is used to manage stores and uploads in Cloud Symbol Server'
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  version: 1.0.0

paths:
  /tokens:
    get:
      summary: Fetch a list of all tokens for current user
      operationId: getTokens

      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getTokensResponse'

        401:
          $ref: '#/components/responses/401'

    post:
      summary: Create a new token for current user
      operationId: createToken

      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createTokenResponse'

        401:
          $ref: '#/components/responses/401'

  /tokens/{token}:
    get:
      summary: Fetch a token for current user
      operationId: getToken
      parameters:
        - in: path
          name: token
          schema:
            type: string
          required: true
          description: ID of the token to fetch

      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getTokenResponse'

        404:
          description: Token does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/messageResponse'
        401:
          $ref: '#/components/responses/401'

    put:
      summary: Update details of a token for current user
      operationId: updateToken
      parameters:
        - in: path
          name: token
          schema:
            type: string
          required: true
          description: ID of the token to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateTokenRequest'

      responses:
        200:
          description: Success

        404:
          description: Token does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/messageResponse'
        401:
          $ref: '#/components/responses/401'

    delete:
      summary: Delete a token for current user
      operationId: deleteToken
      parameters:
        - in: path
          name: token
          schema:
            type: string
          required: true
          description: ID of the token to delete

      responses:
        200:
          description: Success

        404:
          description: Token does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/messageResponse'
        401:
          $ref: '#/components/responses/401'

  /stores:
    get:
      summary: Fetch a list of all stores
      operationId: getStores

      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getStoresResponse'

        401:
          $ref: '#/components/responses/401'

  /stores/{storeId}:
    post:
      summary: Create a new store
      operationId: createStore
      parameters:
        - in: path
          name: storeId
          schema:
            type: string
          required: true
          description: ID of store to create

      responses:
        200:
          description: Success

        401:
          $ref: '#/components/responses/401'

        409:
          description: Store already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/messageResponse'

    delete:
      summary: Delete an existing store
      operationId: deleteStore
      parameters:
        - in: path
          name: storeId
          schema:
            type: string
          required: true
          description: ID of store to delete

      responses:
        200:
          description: Success

        401:
          $ref: '#/components/responses/401'

        404:
          description: Store does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/messageResponse'

  /stores/{storeId}/files:
    get:
      summary: Fetch a list of files in store
      operationId: getStoreFiles
      parameters:
        - in: path
          name: storeId
          schema:
            type: string
          required: true
          description: ID of the store containing the files
        - in: query
          name: offset
          schema:
            type: integer
            minimum: 0
            default: 0
          required: false
          description: How many entries to skip (used for pagination of results)
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 25
          required: false
          description: Max number of results to return (used for pagination of results)

      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getStoreFilesResponse'

        401:
          $ref: '#/components/responses/401'

        404:
          description: No such store
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/messageResponse'

  /stores/{storeId}/files/{fileId}/hashes:
    get:
      summary: Fetch a list of hashes for a specific file in store
      operationId: getStoreFileHashes
      parameters:
        - in: path
          name: storeId
          schema:
            type: string
          required: true
          description: ID of the store containing the file
        - in: path
          name: fileId
          schema:
            type: string
          required: true
          description: ID of the file
        - in: query
          name: offset
          schema:
            type: integer
            minimum: 0
            default: 0
          required: false
          description: How many entries to skip (used for pagination of results)
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 25
          required: false
          description: Max number of results to return (used for pagination of results)

      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getStoreFileHashesResponse'

        401:
          $ref: '#/components/responses/401'

        404:
          description: No such store
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/messageResponse'

  /stores/{storeId}/uploads:
    get:
      summary: Fetch a list of all uploads in store
      operationId: getStoreUploadIds
      parameters:
        - in: path
          name: storeId
          schema:
            type: string
          required: true
          description: ID of the store containing the uploads

      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getStoreUploadIdsResponse'

        401:
          $ref: '#/components/responses/401'

        404:
          description: No such store
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/messageResponse'

    post:
      summary: Start a new upload
      operationId: createStoreUpload
      parameters:
        - in: path
          name: storeId
          schema:
            type: string
          required: true
          description: ID of the store containing the upload
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createStoreUploadRequest'
      
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createStoreUploadResponse'

        401:
          $ref: '#/components/responses/401'

  /stores/{storeId}/uploads/{uploadId}:
    get:
      summary: Fetch an upload
      operationId: getStoreUpload
      parameters:
        - in: path
          name: uploadId
          schema:
            type: string
          required: true
          description: ID of the upload to fetch
        - in: path
          name: storeId
          schema:
            type: string
          required: true
          description: ID of the store containing the upload
      
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getStoreUploadResponse'

        401:
          $ref: '#/components/responses/401'

        404:
          description: No such store/upload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/messageResponse'

  /stores/{storeId}/uploads/{uploadId}/completed:
    post:
      summary: Mark an upload as completed
      operationId: markStoreUploadCompleted
      parameters:
        - in: path
          name: uploadId
          schema:
            type: string
          required: true
          description: ID of the upload to fetch
        - in: path
          name: storeId
          schema:
            type: string
          required: true
          description: ID of the store containing the upload

      responses:
        200:
          description: Success

        401:
          $ref: '#/components/responses/401'

        404:
          description: No such store/upload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/messageResponse'

  /stores/{storeId}/uploads/{uploadId}/aborted:
    post:
      summary: Mark an upload as aborted
      operationId: markStoreUploadAborted
      parameters:
        - in: path
          name: uploadId
          schema:
            type: string
          required: true
          description: ID of the upload to mark as aborted
        - in: path
          name: storeId
          schema:
            type: string
          required: true
          description: ID of the store containing the upload

      responses:
        200:
          description: Success

        401:
          $ref: '#/components/responses/401'

        404:
          description: No such store/upload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/messageResponse'

  /stores/{storeId}/uploads/{uploadId}/expire:
    post:
      summary: Expire store upload and consider files for GC
      operationId: expireStoreUpload
      parameters:
        - in: path
          name: uploadId
          schema:
            type: string
          required: true
          description: ID of the upload to fetch
        - in: path
          name: storeId
          schema:
            type: string
          required: true
          description: ID of the store containing the upload

      responses:
        200:
          description: Success

        401:
          $ref: '#/components/responses/401'

        404:
          description: No such store/upload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/messageResponse'

  /stores/{storeId}/uploads/{uploadId}/files/{fileId}/uploaded:
    post:
      summary: Mark a file within an upload as uploaded
      operationId: markStoreUploadFileUploaded
      parameters:
        - in: path
          name: uploadId
          schema:
            type: string
          required: true
          description: ID of the upload to fetch
        - in: path
          name: storeId
          schema:
            type: string
          required: true
          description: ID of the store containing the upload
        - in: path
          name: fileId
          schema:
            type: integer
          required: true
          description: Index of the file within the upload that should be marked as uploaded

      responses:
        200:
          description: Success

        401:
          $ref: '#/components/responses/401'

        404:
          description: No such store/upload/item
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/messageResponse'

components:

  responses:
    401:
      description: Not authorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/messageResponse'

  schemas:

    storeFileHashStatus:
      type: string
      enum:
        - pending
        - present

    messageResponse:
      type: object
      properties:
        message:
          type: string
          example: Invalid API invocation

    getTokensResponse:
      type: array
      items:
        $ref: '#/components/schemas/getTokenResponse'

    createTokenResponse:
      type: object
      properties:
        token:
          type: string
          description: Personal Access Token
          example: NyXfFDMc3A3KkvVwK5wJcnq9aRqYufgQ

    getTokenResponse:
      type: object
      properties:
        token:
          type: string
          description: Personal Access Token
            This token can be used for authentication when accessing non-token related APIs
          example: NyXfFDMc3A3KkvVwK5wJcnq9aRqYufgQ
        description:
          type: string
          description: Textual description of token
            Users fill this in to remind themselves the purpose of a token and/or where it is used
          example: Used for local testing purposes
        creationTimestamp:
          type: string
          description: Creation timestamp, in RFC3339 format
          example: '2019-10-12T07:20:50.52Z'

    updateTokenRequest:
      type: object
      properties:
        description:
          type: string
          description: Textual description of token
            Users fill this in to remind themselves the purpose of a token and/or where it is used
          example: Used for local testing purposes

    getStoresResponse:
      type: array
      items:
        type: string
        example: example-store

    createStoreUploadRequest:
      type: object
      properties:
        useProgressApi:
          type: boolean
          example: true
          description: When present and set to true, the client will provide progress updates;
            Legacy clients will create an upload, then upload the required files to GCS, without
            progress/completion callbacks
        description:
          type: string
          example: Example application
        buildId:
          type: string
          example: Build 432
        files:
          type: array
          items:
            $ref: '#/components/schemas/uploadFileRequest'

    uploadFileRequest:
      type: object
      properties:
        fileName:
          type: string
          example: Application.pdb
        hash:
          type: string
          example: 7F416863ABF34C3E894BAD1739BAA5571

    getStoreUploadIdsResponse:
      type: array
      items:
        type: string
        example: 
          - "1"
          - "2"
          - "3"

    paginationResponse:
      type: object
      properties:
        total:
          type: integer
        

    getStoreFilesResponse:
      type: object
      properties:
        files:
          type: array
          items:
            type: string
        pagination:
          $ref: '#/components/schemas/paginationResponse'

    getStoreFileHashResponse:
      type: object
      properties:
        hash: 
          type: string
          example: 7F416863ABF34C3E894BAD1739BAA5571
        status:
          $ref: '#/components/schemas/storeFileHashStatus'

    getStoreFileHashesResponse:
      type: object
      properties:
        hashes:
          type: array
          items:
            $ref: getStoreFileHashResponse
        pagination:
          $ref: '#/components/schemas/paginationResponse'

    createStoreUploadResponse:
      type: object
      properties:
        id:
          type: string
          example: s4elWg054qyrpHCsHqLq
        files:
          type: array
          items:
            $ref: '#/components/schemas/uploadFileResponse'

    uploadFileResponse:
      type: object
      properties:
        fileName:
          type: string
          example: Application.pdb
        hash:
          type: string
          example: 7F416863ABF34C3E894BAD1739BAA5571
        url:
          type: string
          example: https://storage.googleapis.com/storage/v1/b/example-bucket/o/stores/default/Application.pdb/7F416863ABF34C3E894BAD1739BAA5571/Application.pdb?GoogleAcountID=123456&Sign=123012301230124012401240124012031021024012401240124012401240241
          description: Short-lived signed URL where the client should upload the file to, or blank if the file already exists in the storage backend

    getStoreUploadResponse:
      type: object
      properties:
        description:
          type: string
          example: Example application
        buildId:
          type: string
          example: Build 432
        timestamp:
          type: string
          example: '2019-10-12T07:20:50.52Z'
        files:
          type: array
          items:
            $ref: '#/components/schemas/getFileResponse'
        status:
          type: string
          example: completed
          enum:
            - unknown
            - in_progress
            - completed
            - aborted
            - expired

    getFileResponse:
      type: object
      properties:
        fileName:
          type: string
          example: Application.pdb
        hash:
          type: string
          example: 7F416863ABF34C3E894BAD1739BAA5571
        status:
          type: string
          example: completed
          enum:
            - unknown
            - already_present
            - pending
            - completed
            - aborted
            - expired

  securitySchemes:
    emailAndPat:
      type: http
      scheme: basic

security:
  - emailAndPat: []
