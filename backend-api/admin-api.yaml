openapi: 3.0.1

info:
  title: Cloud Symbol Server Admin API
  description: 'This is the API that is used to manage stores and uploads in Cloud Symbol Server'
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  version: 1.0.0

paths:
  /tokens:
    get:
      summary: Fetch a list of all tokens for current user
      operationId: getTokens

      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getTokensResponse'

        401:
          $ref: '#/components/responses/401'

    post:
      summary: Create a new token for current user
      operationId: createToken

      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createTokenResponse'

        401:
          $ref: '#/components/responses/401'

  /tokens/{token}:
    get:
      summary: Fetch a token for current user
      operationId: getToken
      parameters:
        - in: path
          name: token
          schema:
            type: string
          required: true
          description: ID of the token to fetch

      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getTokenResponse'

        404:
          description: Token does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/messageResponse'
        401:
          $ref: '#/components/responses/401'

    put:
      summary: Update details of a token for current user
      operationId: updateToken
      parameters:
        - in: path
          name: token
          schema:
            type: string
          required: true
          description: ID of the token to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateTokenRequest'

      responses:
        200:
          description: Success

        404:
          description: Token does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/messageResponse'
        401:
          $ref: '#/components/responses/401'

    delete:
      summary: Delete a token for current user
      operationId: deleteToken
      parameters:
        - in: path
          name: token
          schema:
            type: string
          required: true
          description: ID of the token to delete

      responses:
        200:
          description: Success

        404:
          description: Token does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/messageResponse'
        401:
          $ref: '#/components/responses/401'

  /stores:
    get:
      summary: Fetch a list of all stores
      operationId: getStores

      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getStoresResponse'

        401:
          $ref: '#/components/responses/401'

  /stores/{storeId}:
    post:
      summary: Create a new store
      operationId: createStore
      parameters:
        - in: path
          name: storeId
          schema:
            type: string
          required: true
          description: ID of store to create

      responses:
        200:
          description: Success

        401:
          $ref: '#/components/responses/401'

        409:
          description: Store already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/messageResponse'

    delete:
      summary: Delete an existing store
      operationId: deleteStore
      parameters:
        - in: path
          name: storeId
          schema:
            type: string
          required: true
          description: ID of store to delete

      responses:
        200:
          description: Success

        401:
          $ref: '#/components/responses/401'

        404:
          description: Store does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/messageResponse'

  /stores/{storeId}/files:
    get:
      summary: Fetch a list of files in store
      operationId: getStoreFiles
      parameters:
        - in: path
          name: storeId
          schema:
            type: string
          required: true
          description: ID of the store containing the files
        - in: query
          name: offset
          schema:
            type: integer
            minimum: 0
            default: 0
          required: false
          description: How many entries to skip (used for pagination of results)
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 25
          required: false
          description: Max number of results to return (used for pagination of results)

      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getStoreFilesResponse'

        401:
          $ref: '#/components/responses/401'

        404:
          description: No such store
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/messageResponse'

  /stores/{storeId}/files/{fileId}/blobs:
    get:
      summary: Fetch a list of blobs for a specific file in store
      operationId: getStoreFileBlobs
      parameters:
        - in: path
          name: storeId
          schema:
            type: string
          required: true
          description: ID of the store containing the file
        - in: path
          name: fileId
          schema:
            type: string
          required: true
          description: ID of the file
        - in: query
          name: offset
          schema:
            type: integer
            minimum: 0
            default: 0
          required: false
          description: How many entries to skip (used for pagination of results)
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 25
          required: false
          description: Max number of results to return (used for pagination of results)

      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getStoreFileBlobsResponse'

        401:
          $ref: '#/components/responses/401'

        404:
          description: No such store
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/messageResponse'

  /stores/{storeId}/files/{fileId}/blobs/{blobId}/getDownloadUrl:
    get:
      summary: Request download URL for the binary blob associated with a particular store/file/blob-id
      operationId: getStoreFileBlobDownloadUrl
      parameters:
        - in: path
          name: storeId
          schema:
            type: string
          required: true
          description: ID of the store containing the file
        - in: path
          name: fileId
          schema:
            type: string
          required: true
          description: ID of the file
        - in: path
          name: blobId
          schema:
            type: string
          required: true
          description: ID of the blob

      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getStoreFileBlobDownloadUrlResponse'

        401:
          $ref: '#/components/responses/401'

        404:
          description: No such store
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/messageResponse'

  /stores/{storeId}/uploads:
    get:
      summary: Fetch a list of uploads in store
      operationId: getStoreUploads
      parameters:
        - in: path
          name: storeId
          schema:
            type: string
          required: true
          description: ID of the store containing the uploads
        - in: query
          name: offset
          schema:
            type: integer
            minimum: 0
            default: 0
          required: false
          description: How many entries to skip (used for pagination of results)
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 25
          required: false
          description: Max number of results to return (used for pagination of results)

      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getStoreUploadsResponse'

        401:
          $ref: '#/components/responses/401'

        404:
          description: No such store
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/messageResponse'

    post:
      summary: Start a new upload
      operationId: createStoreUpload
      parameters:
        - in: path
          name: storeId
          schema:
            type: string
          required: true
          description: ID of the store containing the upload
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createStoreUploadRequest'
      
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createStoreUploadResponse'

        401:
          $ref: '#/components/responses/401'

  /stores/{storeId}/uploads/{uploadId}:
    get:
      summary: Fetch an upload
      operationId: getStoreUpload
      parameters:
        - in: path
          name: uploadId
          schema:
            type: integer
          required: true
          description: ID of the upload to fetch
        - in: path
          name: storeId
          schema:
            type: string
          required: true
          description: ID of the store containing the upload
      
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getStoreUploadResponse'

        401:
          $ref: '#/components/responses/401'

        404:
          description: No such store/upload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/messageResponse'

  /stores/{storeId}/uploads/{uploadId}/completed:
    post:
      summary: Mark an upload as completed
      operationId: markStoreUploadCompleted
      parameters:
        - in: path
          name: uploadId
          schema:
            type: integer
          required: true
          description: ID of the upload to fetch
        - in: path
          name: storeId
          schema:
            type: string
          required: true
          description: ID of the store containing the upload

      responses:
        200:
          description: Success

        401:
          $ref: '#/components/responses/401'

        404:
          description: No such store/upload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/messageResponse'

  /stores/{storeId}/uploads/{uploadId}/aborted:
    post:
      summary: Mark an upload as aborted
      operationId: markStoreUploadAborted
      parameters:
        - in: path
          name: uploadId
          schema:
            type: integer
          required: true
          description: ID of the upload to mark as aborted
        - in: path
          name: storeId
          schema:
            type: string
          required: true
          description: ID of the store containing the upload

      responses:
        200:
          description: Success

        401:
          $ref: '#/components/responses/401'

        404:
          description: No such store/upload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/messageResponse'

  /stores/{storeId}/uploads/{uploadId}/expire:
    post:
      summary: Expire store upload and consider files for GC
      operationId: expireStoreUpload
      parameters:
        - in: path
          name: uploadId
          schema:
            type: integer
          required: true
          description: ID of the upload to fetch
        - in: path
          name: storeId
          schema:
            type: string
          required: true
          description: ID of the store containing the upload

      responses:
        200:
          description: Success

        401:
          $ref: '#/components/responses/401'

        404:
          description: No such store/upload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/messageResponse'

  /stores/{storeId}/uploads/{uploadId}/files/{fileId}/uploaded:
    post:
      summary: Mark a file within an upload as uploaded
      operationId: markStoreUploadFileUploaded
      parameters:
        - in: path
          name: uploadId
          schema:
            type: integer
          required: true
          description: ID of the upload to fetch
        - in: path
          name: storeId
          schema:
            type: string
          required: true
          description: ID of the store containing the upload
        - in: path
          name: fileId
          schema:
            type: integer
          required: true
          description: Index of the file within the upload that should be marked as uploaded

      responses:
        200:
          description: Success

        401:
          $ref: '#/components/responses/401'

        404:
          description: No such store/upload/item
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/messageResponse'

components:

  responses:
    401:
      description: Not authorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/messageResponse'

  schemas:

    fileDownload:
      type: string
      format: binary

    storeUploadStatus:
      type: string
      example: completed
      enum:
        - unknown
        - in_progress
        - completed
        - aborted
        - expired

    storeUploadFileStatus:
      type: string
      example: completed
      enum:
        - unknown
        - already_present
        - pending
        - completed
        - aborted
        - expired

    storeFileBlobType:
      type: string
      enum:
        - unknown
        - pe
        - pdb

    storeFileBlobStatus:
      type: string
      enum:
        - pending
        - present

    messageResponse:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          example: Invalid API invocation

    paginationResponse:
      type: object
      required:
        - total
      properties:
        total:
          type: integer

    getTokensResponse:
      type: array
      items:
        $ref: '#/components/schemas/getTokenResponse'

    createTokenResponse:
      type: object
      required:
        - token
      properties:
        token:
          type: string
          description: Personal Access Token
          example: NyXfFDMc3A3KkvVwK5wJcnq9aRqYufgQ

    getTokenResponse:
      type: object
      required:
        - token
        - description
        - creationTimestamp
      properties:
        token:
          type: string
          description: Personal Access Token
            This token can be used for authentication when accessing non-token related APIs
          example: NyXfFDMc3A3KkvVwK5wJcnq9aRqYufgQ
        description:
          type: string
          description: Textual description of token
            Users fill this in to remind themselves the purpose of a token and/or where it is used
          example: Used for local testing purposes
        creationTimestamp:
          type: string
          description: Creation timestamp, in RFC3339 format
          example: '2019-10-12T07:20:50.52Z'

    updateTokenRequest:
      type: object
      required:
        - description
      properties:
        description:
          type: string
          description: Textual description of token
            Users fill this in to remind themselves the purpose of a token and/or where it is used
          example: Used for local testing purposes

    getStoresResponse:
      type: array
      items:
        type: string
        example: example-store

    createStoreUploadRequest:
      type: object
      # This API call will continue to be used by legacy clients for some time. Those
      #  may pass only some of these parameters. Therefore we leave all parameters here as
      #  optional for the time being.
      #
      # required:
      #   - useProgressApi
      #   - description
      #   - buildId
      #   - files
      properties:
        useProgressApi:
          type: boolean
          example: true
          description: When present and set to true, the client will provide progress updates;
            Legacy clients will create an upload, then upload the required files to GCS, without
            progress/completion callbacks
        description:
          type: string
          example: Example application
        buildId:
          type: string
          example: Build 432
        files:
          type: array
          items:
            $ref: '#/components/schemas/createStoreUploadFileRequest'

    createStoreUploadFileRequest:
      type: object
      required:
        - fileName
        - blobIdentifier
        # This API call will continue to be used by legacy clients for some time. Those
        #  may pass only some of these parameters. Therefore we leave some parameters here as
        #  optional for the time being.
        # - type
        # - size
        # - contentHash
      properties:
        fileName:
          type: string
          example: Application.pdb
        blobIdentifier:
          type: string
          example: 7F416863ABF34C3E894BAD1739BAA5571
        type:
          $ref: '#/components/schemas/storeFileBlobType'
        size:
          type: integer
          format: int64
          example: 127123006
        contentHash:
          type: string
          example: 2cf24dba5fb0a30e26e83b2ac5b9e29e1b161e5c1fa7425e73043362938b9824

    getStoreUploadsResponse:
      type: object
      required:
        - uploads
        - pagination
      properties:
        uploads:
          type: array
          items:
            $ref: '#/components/schemas/getStoreUploadResponse'
        pagination:
          $ref: '#/components/schemas/paginationResponse'

    getStoreFilesResponse:
      type: object
      required:
        - files
        - pagination
      properties:
        files:
          type: array
          items:
            type: string
        pagination:
          $ref: '#/components/schemas/paginationResponse'

    getStoreFileBlobResponse:
      type: object
      required:
        - blobIdentifier
        - uploadTimestamp
        - status
        # This API call will continue to be used by legacy clients for some time. Those
        #  may pass only some of these parameters. Therefore we leave some parameters here as
        #  optional for the time being.
        # - type
        # - size
        # - contentHash
      properties:
        blobIdentifier:
          type: string
          example: 7F416863ABF34C3E894BAD1739BAA5571
        uploadTimestamp:
          type: string
          description: Upload timestamp, in RFC3339 format
          example: '2019-10-12T07:20:50.52Z'
        type:
          $ref: '#/components/schemas/storeFileBlobType'
        size:
          type: integer
          format: int64
          example: 127123006
        contentHash:
          type: string
          example: 2cf24dba5fb0a30e26e83b2ac5b9e29e1b161e5c1fa7425e73043362938b9824
        status:
          $ref: '#/components/schemas/storeFileBlobStatus'

    getStoreFileBlobsResponse:
      type: object
      required:
        - blobs
        - pagination
      properties:
        blobs:
          type: array
          items:
            $ref: getStoreFileBlobResponse
        pagination:
          $ref: '#/components/schemas/paginationResponse'

    getStoreFileBlobDownloadUrlResponse:
      type: object
      required:
        - method
        - url
      properties:
        method:
          type: string
          example: GET
        url:
          type: string
          example: https://storage.googleapis.com/test-cloud-symbol-server-symbols/stores/example2/example.exe/61C0D4547000/example.exe?Expires=1673733969&GoogleAccessId=backend-api%40test-cloud-symbol-server.iam.gserviceaccount.com&Signature=AwTZZt0J7bdDFYN7qAEf2H6%2FIWQjynTfMP76JAsVj80hK7NQEXswx68TEXNMhF6GXxgLBRA8hKcBMSIjfVcExUyWzLYl8GqWe4xc8z7TVpExAoQ0surYf6ULZrjP%2FPU62o01giCyAs1ZQtDLx40glG2hJIu0toBckUggT6blmISfZcfRKWvv7zask%2FHpeUPEHwhhooh%2FiyG3JKluB3BvNOnnLCpdOEznFLZLkVQbxASDZhFlM7NIOqQj1tX3v6Z9wNc0XjwTzTd7B4iAQ72JfQPhh%2FXedbqR9Bm0SA5xl4eeqNjZtmlCdqy4r%2BbsyBRnCeITF6u1wOXvw8dSLL4Hag%3D%3D

    createStoreUploadResponse:
      type: object
      required:
        - uploadId
        - id
        - files
      properties:
        uploadId:
          type: integer
          example: 129
        # id is present for legacy (0.x) API users
        id:
          type: string
          example: s4elWg054qyrpHCsHqLq
        files:
          type: array
          items:
            $ref: '#/components/schemas/uploadFileResponse'

    uploadFileResponse:
      type: object
      required:
        - fileName
        - blobIdentifier
      properties:
        fileName:
          type: string
          example: Application.pdb
        blobIdentifier:
          type: string
          example: 7F416863ABF34C3E894BAD1739BAA5571
        url:
          type: string
          example: https://storage.googleapis.com/storage/v1/b/example-bucket/o/stores/default/Application.pdb/7F416863ABF34C3E894BAD1739BAA5571/Application.pdb?GoogleAcountID=123456&Sign=123012301230124012401240124012031021024012401240124012401240241
          description: Short-lived signed URL where the client should upload the file to, or blank if the file already exists in the storage backend

    getStoreUploadResponse:
      type: object
      required:
        - uploadId
        - description
        - buildId
        - timestamp
        - files
        - status
      properties:
        uploadId:
          type: integer
          example: 129
        description:
          type: string
          example: Example application
        buildId:
          type: string
          example: Build 432
        timestamp:
          type: string
          example: '2019-10-12T07:20:50.52Z'
        files:
          type: array
          items:
            $ref: '#/components/schemas/getStoreUploadFileResponse'
        status:
          $ref: '#/components/schemas/storeUploadStatus'

    getStoreUploadFileResponse:
      type: object
      required:
        - fileName
        - blobIdentifier
        - status
      properties:
        fileName:
          type: string
          example: Application.pdb
        blobIdentifier:
          type: string
          example: 7F416863ABF34C3E894BAD1739BAA5571
        status:
          $ref: '#/components/schemas/storeUploadFileStatus'

  securitySchemes:
    emailAndPat:
      type: http
      scheme: basic

security:
  - emailAndPat: []
