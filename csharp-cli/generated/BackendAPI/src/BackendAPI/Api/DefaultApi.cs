/*
 * Cloud Symbol Store Uplaod API
 *
 * This is the API that is used to upload symbols to Cloud Symbol Store
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using BackendAPI.Client;
using BackendAPI.Model;

namespace BackendAPI.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Start a new upload transaction
        /// </summary>
        /// <exception cref="BackendAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uploadTransactionRequest"></param>
        /// <returns>UploadTransactionResponse</returns>
        UploadTransactionResponse CreateTransaction(UploadTransactionRequest uploadTransactionRequest);

        /// <summary>
        /// Start a new upload transaction
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BackendAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uploadTransactionRequest"></param>
        /// <returns>ApiResponse of UploadTransactionResponse</returns>
        ApiResponse<UploadTransactionResponse> CreateTransactionWithHttpInfo(UploadTransactionRequest uploadTransactionRequest);
        /// <summary>
        /// Fetch a transaction
        /// </summary>
        /// <exception cref="BackendAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">ID of the transaction to fetch</param>
        /// <returns>GetTransactionResponse</returns>
        GetTransactionResponse GetTransaction(string transactionId);

        /// <summary>
        /// Fetch a transaction
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BackendAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">ID of the transaction to fetch</param>
        /// <returns>ApiResponse of GetTransactionResponse</returns>
        ApiResponse<GetTransactionResponse> GetTransactionWithHttpInfo(string transactionId);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Start a new upload transaction
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BackendAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uploadTransactionRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UploadTransactionResponse</returns>
        System.Threading.Tasks.Task<UploadTransactionResponse> CreateTransactionAsync(UploadTransactionRequest uploadTransactionRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Start a new upload transaction
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BackendAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uploadTransactionRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UploadTransactionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UploadTransactionResponse>> CreateTransactionWithHttpInfoAsync(UploadTransactionRequest uploadTransactionRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Fetch a transaction
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BackendAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">ID of the transaction to fetch</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetTransactionResponse</returns>
        System.Threading.Tasks.Task<GetTransactionResponse> GetTransactionAsync(string transactionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Fetch a transaction
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BackendAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">ID of the transaction to fetch</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetTransactionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetTransactionResponse>> GetTransactionWithHttpInfoAsync(string transactionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApi : IDefaultApiSync, IDefaultApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DefaultApi : IDefaultApi
    {
        private BackendAPI.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi(string basePath)
        {
            this.Configuration = BackendAPI.Client.Configuration.MergeConfigurations(
                BackendAPI.Client.GlobalConfiguration.Instance,
                new BackendAPI.Client.Configuration { BasePath = basePath }
            );
            this.Client = new BackendAPI.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new BackendAPI.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = BackendAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DefaultApi(BackendAPI.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = BackendAPI.Client.Configuration.MergeConfigurations(
                BackendAPI.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new BackendAPI.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new BackendAPI.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = BackendAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public DefaultApi(BackendAPI.Client.ISynchronousClient client, BackendAPI.Client.IAsynchronousClient asyncClient, BackendAPI.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = BackendAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public BackendAPI.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public BackendAPI.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public BackendAPI.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public BackendAPI.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Start a new upload transaction 
        /// </summary>
        /// <exception cref="BackendAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uploadTransactionRequest"></param>
        /// <returns>UploadTransactionResponse</returns>
        public UploadTransactionResponse CreateTransaction(UploadTransactionRequest uploadTransactionRequest)
        {
            BackendAPI.Client.ApiResponse<UploadTransactionResponse> localVarResponse = CreateTransactionWithHttpInfo(uploadTransactionRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Start a new upload transaction 
        /// </summary>
        /// <exception cref="BackendAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uploadTransactionRequest"></param>
        /// <returns>ApiResponse of UploadTransactionResponse</returns>
        public BackendAPI.Client.ApiResponse<UploadTransactionResponse> CreateTransactionWithHttpInfo(UploadTransactionRequest uploadTransactionRequest)
        {
            // verify the required parameter 'uploadTransactionRequest' is set
            if (uploadTransactionRequest == null)
                throw new BackendAPI.Client.ApiException(400, "Missing required parameter 'uploadTransactionRequest' when calling DefaultApi->CreateTransaction");

            BackendAPI.Client.RequestOptions localVarRequestOptions = new BackendAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BackendAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BackendAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = uploadTransactionRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<UploadTransactionResponse>("/transactions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTransaction", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Start a new upload transaction 
        /// </summary>
        /// <exception cref="BackendAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uploadTransactionRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UploadTransactionResponse</returns>
        public async System.Threading.Tasks.Task<UploadTransactionResponse> CreateTransactionAsync(UploadTransactionRequest uploadTransactionRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            BackendAPI.Client.ApiResponse<UploadTransactionResponse> localVarResponse = await CreateTransactionWithHttpInfoAsync(uploadTransactionRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Start a new upload transaction 
        /// </summary>
        /// <exception cref="BackendAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uploadTransactionRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UploadTransactionResponse)</returns>
        public async System.Threading.Tasks.Task<BackendAPI.Client.ApiResponse<UploadTransactionResponse>> CreateTransactionWithHttpInfoAsync(UploadTransactionRequest uploadTransactionRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'uploadTransactionRequest' is set
            if (uploadTransactionRequest == null)
                throw new BackendAPI.Client.ApiException(400, "Missing required parameter 'uploadTransactionRequest' when calling DefaultApi->CreateTransaction");


            BackendAPI.Client.RequestOptions localVarRequestOptions = new BackendAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = BackendAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BackendAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = uploadTransactionRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<UploadTransactionResponse>("/transactions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTransaction", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetch a transaction 
        /// </summary>
        /// <exception cref="BackendAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">ID of the transaction to fetch</param>
        /// <returns>GetTransactionResponse</returns>
        public GetTransactionResponse GetTransaction(string transactionId)
        {
            BackendAPI.Client.ApiResponse<GetTransactionResponse> localVarResponse = GetTransactionWithHttpInfo(transactionId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch a transaction 
        /// </summary>
        /// <exception cref="BackendAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">ID of the transaction to fetch</param>
        /// <returns>ApiResponse of GetTransactionResponse</returns>
        public BackendAPI.Client.ApiResponse<GetTransactionResponse> GetTransactionWithHttpInfo(string transactionId)
        {
            // verify the required parameter 'transactionId' is set
            if (transactionId == null)
                throw new BackendAPI.Client.ApiException(400, "Missing required parameter 'transactionId' when calling DefaultApi->GetTransaction");

            BackendAPI.Client.RequestOptions localVarRequestOptions = new BackendAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BackendAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BackendAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("transactionId", BackendAPI.Client.ClientUtils.ParameterToString(transactionId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<GetTransactionResponse>("/transactions/{transactionId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTransaction", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetch a transaction 
        /// </summary>
        /// <exception cref="BackendAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">ID of the transaction to fetch</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetTransactionResponse</returns>
        public async System.Threading.Tasks.Task<GetTransactionResponse> GetTransactionAsync(string transactionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            BackendAPI.Client.ApiResponse<GetTransactionResponse> localVarResponse = await GetTransactionWithHttpInfoAsync(transactionId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch a transaction 
        /// </summary>
        /// <exception cref="BackendAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">ID of the transaction to fetch</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetTransactionResponse)</returns>
        public async System.Threading.Tasks.Task<BackendAPI.Client.ApiResponse<GetTransactionResponse>> GetTransactionWithHttpInfoAsync(string transactionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'transactionId' is set
            if (transactionId == null)
                throw new BackendAPI.Client.ApiException(400, "Missing required parameter 'transactionId' when calling DefaultApi->GetTransaction");


            BackendAPI.Client.RequestOptions localVarRequestOptions = new BackendAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = BackendAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BackendAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("transactionId", BackendAPI.Client.ClientUtils.ParameterToString(transactionId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GetTransactionResponse>("/transactions/{transactionId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTransaction", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
