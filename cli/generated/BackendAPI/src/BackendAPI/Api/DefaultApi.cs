/*
 * Cloud Symbol Server Admin API
 *
 * This is the API that is used to manage stores and uploads in Cloud Symbol Server
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using BackendAPI.Client;
using BackendAPI.Model;

namespace BackendAPI.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a new store
        /// </summary>
        /// <exception cref="BackendAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">ID of store to create</param>
        /// <returns></returns>
        void CreateStore(string storeId);

        /// <summary>
        /// Create a new store
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BackendAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">ID of store to create</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateStoreWithHttpInfo(string storeId);
        /// <summary>
        /// Start a new upload
        /// </summary>
        /// <exception cref="BackendAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">ID of the store containing the upload</param>
        /// <param name="createStoreUploadRequest"></param>
        /// <returns>CreateStoreUploadResponse</returns>
        CreateStoreUploadResponse CreateStoreUpload(string storeId, CreateStoreUploadRequest createStoreUploadRequest);

        /// <summary>
        /// Start a new upload
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BackendAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">ID of the store containing the upload</param>
        /// <param name="createStoreUploadRequest"></param>
        /// <returns>ApiResponse of CreateStoreUploadResponse</returns>
        ApiResponse<CreateStoreUploadResponse> CreateStoreUploadWithHttpInfo(string storeId, CreateStoreUploadRequest createStoreUploadRequest);
        /// <summary>
        /// Delete an existing store
        /// </summary>
        /// <exception cref="BackendAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">ID of store to delete</param>
        /// <returns></returns>
        void DeleteStore(string storeId);

        /// <summary>
        /// Delete an existing store
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BackendAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">ID of store to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteStoreWithHttpInfo(string storeId);
        /// <summary>
        /// Fetch an upload
        /// </summary>
        /// <exception cref="BackendAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uploadId">ID of the upload to fetch</param>
        /// <param name="storeId">ID of the store containing the upload</param>
        /// <returns>GetStoreUploadResponse</returns>
        GetStoreUploadResponse GetStoreUpload(string uploadId, string storeId);

        /// <summary>
        /// Fetch an upload
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BackendAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uploadId">ID of the upload to fetch</param>
        /// <param name="storeId">ID of the store containing the upload</param>
        /// <returns>ApiResponse of GetStoreUploadResponse</returns>
        ApiResponse<GetStoreUploadResponse> GetStoreUploadWithHttpInfo(string uploadId, string storeId);
        /// <summary>
        /// Fetch a list of all stores
        /// </summary>
        /// <exception cref="BackendAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;string&gt;</returns>
        List<string> GetStores();

        /// <summary>
        /// Fetch a list of all stores
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BackendAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> GetStoresWithHttpInfo();
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create a new store
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BackendAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">ID of store to create</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateStoreAsync(string storeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a new store
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BackendAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">ID of store to create</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateStoreWithHttpInfoAsync(string storeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Start a new upload
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BackendAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">ID of the store containing the upload</param>
        /// <param name="createStoreUploadRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateStoreUploadResponse</returns>
        System.Threading.Tasks.Task<CreateStoreUploadResponse> CreateStoreUploadAsync(string storeId, CreateStoreUploadRequest createStoreUploadRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Start a new upload
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BackendAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">ID of the store containing the upload</param>
        /// <param name="createStoreUploadRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateStoreUploadResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateStoreUploadResponse>> CreateStoreUploadWithHttpInfoAsync(string storeId, CreateStoreUploadRequest createStoreUploadRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete an existing store
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BackendAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">ID of store to delete</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteStoreAsync(string storeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete an existing store
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BackendAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">ID of store to delete</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteStoreWithHttpInfoAsync(string storeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Fetch an upload
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BackendAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uploadId">ID of the upload to fetch</param>
        /// <param name="storeId">ID of the store containing the upload</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetStoreUploadResponse</returns>
        System.Threading.Tasks.Task<GetStoreUploadResponse> GetStoreUploadAsync(string uploadId, string storeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Fetch an upload
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BackendAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uploadId">ID of the upload to fetch</param>
        /// <param name="storeId">ID of the store containing the upload</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetStoreUploadResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetStoreUploadResponse>> GetStoreUploadWithHttpInfoAsync(string uploadId, string storeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Fetch a list of all stores
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BackendAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> GetStoresAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Fetch a list of all stores
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BackendAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> GetStoresWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApi : IDefaultApiSync, IDefaultApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DefaultApi : IDefaultApi
    {
        private BackendAPI.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi(string basePath)
        {
            this.Configuration = BackendAPI.Client.Configuration.MergeConfigurations(
                BackendAPI.Client.GlobalConfiguration.Instance,
                new BackendAPI.Client.Configuration { BasePath = basePath }
            );
            this.Client = new BackendAPI.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new BackendAPI.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = BackendAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DefaultApi(BackendAPI.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = BackendAPI.Client.Configuration.MergeConfigurations(
                BackendAPI.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new BackendAPI.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new BackendAPI.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = BackendAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public DefaultApi(BackendAPI.Client.ISynchronousClient client, BackendAPI.Client.IAsynchronousClient asyncClient, BackendAPI.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = BackendAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public BackendAPI.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public BackendAPI.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public BackendAPI.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public BackendAPI.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create a new store 
        /// </summary>
        /// <exception cref="BackendAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">ID of store to create</param>
        /// <returns></returns>
        public void CreateStore(string storeId)
        {
            CreateStoreWithHttpInfo(storeId);
        }

        /// <summary>
        /// Create a new store 
        /// </summary>
        /// <exception cref="BackendAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">ID of store to create</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public BackendAPI.Client.ApiResponse<Object> CreateStoreWithHttpInfo(string storeId)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new BackendAPI.Client.ApiException(400, "Missing required parameter 'storeId' when calling DefaultApi->CreateStore");

            BackendAPI.Client.RequestOptions localVarRequestOptions = new BackendAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BackendAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BackendAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("storeId", BackendAPI.Client.ClientUtils.ParameterToString(storeId)); // path parameter

            // authentication (emailAndPat) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + BackendAPI.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/stores/{storeId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateStore", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new store 
        /// </summary>
        /// <exception cref="BackendAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">ID of store to create</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateStoreAsync(string storeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await CreateStoreWithHttpInfoAsync(storeId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Create a new store 
        /// </summary>
        /// <exception cref="BackendAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">ID of store to create</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<BackendAPI.Client.ApiResponse<Object>> CreateStoreWithHttpInfoAsync(string storeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new BackendAPI.Client.ApiException(400, "Missing required parameter 'storeId' when calling DefaultApi->CreateStore");


            BackendAPI.Client.RequestOptions localVarRequestOptions = new BackendAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = BackendAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BackendAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("storeId", BackendAPI.Client.ClientUtils.ParameterToString(storeId)); // path parameter

            // authentication (emailAndPat) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + BackendAPI.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/stores/{storeId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateStore", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Start a new upload 
        /// </summary>
        /// <exception cref="BackendAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">ID of the store containing the upload</param>
        /// <param name="createStoreUploadRequest"></param>
        /// <returns>CreateStoreUploadResponse</returns>
        public CreateStoreUploadResponse CreateStoreUpload(string storeId, CreateStoreUploadRequest createStoreUploadRequest)
        {
            BackendAPI.Client.ApiResponse<CreateStoreUploadResponse> localVarResponse = CreateStoreUploadWithHttpInfo(storeId, createStoreUploadRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Start a new upload 
        /// </summary>
        /// <exception cref="BackendAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">ID of the store containing the upload</param>
        /// <param name="createStoreUploadRequest"></param>
        /// <returns>ApiResponse of CreateStoreUploadResponse</returns>
        public BackendAPI.Client.ApiResponse<CreateStoreUploadResponse> CreateStoreUploadWithHttpInfo(string storeId, CreateStoreUploadRequest createStoreUploadRequest)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new BackendAPI.Client.ApiException(400, "Missing required parameter 'storeId' when calling DefaultApi->CreateStoreUpload");

            // verify the required parameter 'createStoreUploadRequest' is set
            if (createStoreUploadRequest == null)
                throw new BackendAPI.Client.ApiException(400, "Missing required parameter 'createStoreUploadRequest' when calling DefaultApi->CreateStoreUpload");

            BackendAPI.Client.RequestOptions localVarRequestOptions = new BackendAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BackendAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BackendAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("storeId", BackendAPI.Client.ClientUtils.ParameterToString(storeId)); // path parameter
            localVarRequestOptions.Data = createStoreUploadRequest;

            // authentication (emailAndPat) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + BackendAPI.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateStoreUploadResponse>("/stores/{storeId}/uploads", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateStoreUpload", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Start a new upload 
        /// </summary>
        /// <exception cref="BackendAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">ID of the store containing the upload</param>
        /// <param name="createStoreUploadRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateStoreUploadResponse</returns>
        public async System.Threading.Tasks.Task<CreateStoreUploadResponse> CreateStoreUploadAsync(string storeId, CreateStoreUploadRequest createStoreUploadRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            BackendAPI.Client.ApiResponse<CreateStoreUploadResponse> localVarResponse = await CreateStoreUploadWithHttpInfoAsync(storeId, createStoreUploadRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Start a new upload 
        /// </summary>
        /// <exception cref="BackendAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">ID of the store containing the upload</param>
        /// <param name="createStoreUploadRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateStoreUploadResponse)</returns>
        public async System.Threading.Tasks.Task<BackendAPI.Client.ApiResponse<CreateStoreUploadResponse>> CreateStoreUploadWithHttpInfoAsync(string storeId, CreateStoreUploadRequest createStoreUploadRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new BackendAPI.Client.ApiException(400, "Missing required parameter 'storeId' when calling DefaultApi->CreateStoreUpload");

            // verify the required parameter 'createStoreUploadRequest' is set
            if (createStoreUploadRequest == null)
                throw new BackendAPI.Client.ApiException(400, "Missing required parameter 'createStoreUploadRequest' when calling DefaultApi->CreateStoreUpload");


            BackendAPI.Client.RequestOptions localVarRequestOptions = new BackendAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = BackendAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BackendAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("storeId", BackendAPI.Client.ClientUtils.ParameterToString(storeId)); // path parameter
            localVarRequestOptions.Data = createStoreUploadRequest;

            // authentication (emailAndPat) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + BackendAPI.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateStoreUploadResponse>("/stores/{storeId}/uploads", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateStoreUpload", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an existing store 
        /// </summary>
        /// <exception cref="BackendAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">ID of store to delete</param>
        /// <returns></returns>
        public void DeleteStore(string storeId)
        {
            DeleteStoreWithHttpInfo(storeId);
        }

        /// <summary>
        /// Delete an existing store 
        /// </summary>
        /// <exception cref="BackendAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">ID of store to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public BackendAPI.Client.ApiResponse<Object> DeleteStoreWithHttpInfo(string storeId)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new BackendAPI.Client.ApiException(400, "Missing required parameter 'storeId' when calling DefaultApi->DeleteStore");

            BackendAPI.Client.RequestOptions localVarRequestOptions = new BackendAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BackendAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BackendAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("storeId", BackendAPI.Client.ClientUtils.ParameterToString(storeId)); // path parameter

            // authentication (emailAndPat) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + BackendAPI.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/stores/{storeId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteStore", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an existing store 
        /// </summary>
        /// <exception cref="BackendAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">ID of store to delete</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteStoreAsync(string storeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteStoreWithHttpInfoAsync(storeId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete an existing store 
        /// </summary>
        /// <exception cref="BackendAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">ID of store to delete</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<BackendAPI.Client.ApiResponse<Object>> DeleteStoreWithHttpInfoAsync(string storeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new BackendAPI.Client.ApiException(400, "Missing required parameter 'storeId' when calling DefaultApi->DeleteStore");


            BackendAPI.Client.RequestOptions localVarRequestOptions = new BackendAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = BackendAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BackendAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("storeId", BackendAPI.Client.ClientUtils.ParameterToString(storeId)); // path parameter

            // authentication (emailAndPat) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + BackendAPI.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/stores/{storeId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteStore", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetch an upload 
        /// </summary>
        /// <exception cref="BackendAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uploadId">ID of the upload to fetch</param>
        /// <param name="storeId">ID of the store containing the upload</param>
        /// <returns>GetStoreUploadResponse</returns>
        public GetStoreUploadResponse GetStoreUpload(string uploadId, string storeId)
        {
            BackendAPI.Client.ApiResponse<GetStoreUploadResponse> localVarResponse = GetStoreUploadWithHttpInfo(uploadId, storeId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch an upload 
        /// </summary>
        /// <exception cref="BackendAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uploadId">ID of the upload to fetch</param>
        /// <param name="storeId">ID of the store containing the upload</param>
        /// <returns>ApiResponse of GetStoreUploadResponse</returns>
        public BackendAPI.Client.ApiResponse<GetStoreUploadResponse> GetStoreUploadWithHttpInfo(string uploadId, string storeId)
        {
            // verify the required parameter 'uploadId' is set
            if (uploadId == null)
                throw new BackendAPI.Client.ApiException(400, "Missing required parameter 'uploadId' when calling DefaultApi->GetStoreUpload");

            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new BackendAPI.Client.ApiException(400, "Missing required parameter 'storeId' when calling DefaultApi->GetStoreUpload");

            BackendAPI.Client.RequestOptions localVarRequestOptions = new BackendAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BackendAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BackendAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("uploadId", BackendAPI.Client.ClientUtils.ParameterToString(uploadId)); // path parameter
            localVarRequestOptions.PathParameters.Add("storeId", BackendAPI.Client.ClientUtils.ParameterToString(storeId)); // path parameter

            // authentication (emailAndPat) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + BackendAPI.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetStoreUploadResponse>("/stores/{storeId}/uploads/{uploadId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStoreUpload", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetch an upload 
        /// </summary>
        /// <exception cref="BackendAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uploadId">ID of the upload to fetch</param>
        /// <param name="storeId">ID of the store containing the upload</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetStoreUploadResponse</returns>
        public async System.Threading.Tasks.Task<GetStoreUploadResponse> GetStoreUploadAsync(string uploadId, string storeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            BackendAPI.Client.ApiResponse<GetStoreUploadResponse> localVarResponse = await GetStoreUploadWithHttpInfoAsync(uploadId, storeId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch an upload 
        /// </summary>
        /// <exception cref="BackendAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uploadId">ID of the upload to fetch</param>
        /// <param name="storeId">ID of the store containing the upload</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetStoreUploadResponse)</returns>
        public async System.Threading.Tasks.Task<BackendAPI.Client.ApiResponse<GetStoreUploadResponse>> GetStoreUploadWithHttpInfoAsync(string uploadId, string storeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'uploadId' is set
            if (uploadId == null)
                throw new BackendAPI.Client.ApiException(400, "Missing required parameter 'uploadId' when calling DefaultApi->GetStoreUpload");

            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new BackendAPI.Client.ApiException(400, "Missing required parameter 'storeId' when calling DefaultApi->GetStoreUpload");


            BackendAPI.Client.RequestOptions localVarRequestOptions = new BackendAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = BackendAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BackendAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("uploadId", BackendAPI.Client.ClientUtils.ParameterToString(uploadId)); // path parameter
            localVarRequestOptions.PathParameters.Add("storeId", BackendAPI.Client.ClientUtils.ParameterToString(storeId)); // path parameter

            // authentication (emailAndPat) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + BackendAPI.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GetStoreUploadResponse>("/stores/{storeId}/uploads/{uploadId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStoreUpload", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetch a list of all stores 
        /// </summary>
        /// <exception cref="BackendAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> GetStores()
        {
            BackendAPI.Client.ApiResponse<List<string>> localVarResponse = GetStoresWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch a list of all stores 
        /// </summary>
        /// <exception cref="BackendAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public BackendAPI.Client.ApiResponse<List<string>> GetStoresWithHttpInfo()
        {
            BackendAPI.Client.RequestOptions localVarRequestOptions = new BackendAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BackendAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BackendAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (emailAndPat) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + BackendAPI.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<string>>("/stores", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStores", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetch a list of all stores 
        /// </summary>
        /// <exception cref="BackendAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> GetStoresAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            BackendAPI.Client.ApiResponse<List<string>> localVarResponse = await GetStoresWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch a list of all stores 
        /// </summary>
        /// <exception cref="BackendAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<BackendAPI.Client.ApiResponse<List<string>>> GetStoresWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            BackendAPI.Client.RequestOptions localVarRequestOptions = new BackendAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = BackendAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BackendAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (emailAndPat) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + BackendAPI.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<string>>("/stores", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStores", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
