/*
 * Cloud Symbol Server Admin API
 *
 * This is the API that is used to manage stores and uploads in Cloud Symbol Server
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = BackendAPI.Client.OpenAPIDateConverter;

namespace BackendAPI.Model
{
    /// <summary>
    /// GetStoreFileBlobResponse
    /// </summary>
    [DataContract(Name = "getStoreFileBlobResponse")]
    public partial class GetStoreFileBlobResponse : IEquatable<GetStoreFileBlobResponse>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = true)]
        public StoreFileBlobStatus Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetStoreFileBlobResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetStoreFileBlobResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetStoreFileBlobResponse" /> class.
        /// </summary>
        /// <param name="blobIdentifier">blobIdentifier (required).</param>
        /// <param name="uploadTimestamp">Upload timestamp, in RFC3339 format (required).</param>
        /// <param name="status">status (required).</param>
        public GetStoreFileBlobResponse(string blobIdentifier = default(string), string uploadTimestamp = default(string), StoreFileBlobStatus status = default(StoreFileBlobStatus))
        {
            // to ensure "blobIdentifier" is required (not null)
            if (blobIdentifier == null)
            {
                throw new ArgumentNullException("blobIdentifier is a required property for GetStoreFileBlobResponse and cannot be null");
            }
            this.BlobIdentifier = blobIdentifier;
            // to ensure "uploadTimestamp" is required (not null)
            if (uploadTimestamp == null)
            {
                throw new ArgumentNullException("uploadTimestamp is a required property for GetStoreFileBlobResponse and cannot be null");
            }
            this.UploadTimestamp = uploadTimestamp;
            this.Status = status;
        }

        /// <summary>
        /// Gets or Sets BlobIdentifier
        /// </summary>
        [DataMember(Name = "blobIdentifier", IsRequired = true, EmitDefaultValue = true)]
        public string BlobIdentifier { get; set; }

        /// <summary>
        /// Upload timestamp, in RFC3339 format
        /// </summary>
        /// <value>Upload timestamp, in RFC3339 format</value>
        [DataMember(Name = "uploadTimestamp", IsRequired = true, EmitDefaultValue = true)]
        public string UploadTimestamp { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetStoreFileBlobResponse {\n");
            sb.Append("  BlobIdentifier: ").Append(BlobIdentifier).Append("\n");
            sb.Append("  UploadTimestamp: ").Append(UploadTimestamp).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetStoreFileBlobResponse);
        }

        /// <summary>
        /// Returns true if GetStoreFileBlobResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of GetStoreFileBlobResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetStoreFileBlobResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.BlobIdentifier == input.BlobIdentifier ||
                    (this.BlobIdentifier != null &&
                    this.BlobIdentifier.Equals(input.BlobIdentifier))
                ) && 
                (
                    this.UploadTimestamp == input.UploadTimestamp ||
                    (this.UploadTimestamp != null &&
                    this.UploadTimestamp.Equals(input.UploadTimestamp))
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BlobIdentifier != null)
                {
                    hashCode = (hashCode * 59) + this.BlobIdentifier.GetHashCode();
                }
                if (this.UploadTimestamp != null)
                {
                    hashCode = (hashCode * 59) + this.UploadTimestamp.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
