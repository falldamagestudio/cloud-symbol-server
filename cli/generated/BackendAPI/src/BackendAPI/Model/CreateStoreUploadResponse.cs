/*
 * Cloud Symbol Server Admin API
 *
 * This is the API that is used to manage stores and uploads in Cloud Symbol Server
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = BackendAPI.Client.OpenAPIDateConverter;

namespace BackendAPI.Model
{
    /// <summary>
    /// CreateStoreUploadResponse
    /// </summary>
    [DataContract(Name = "createStoreUploadResponse")]
    public partial class CreateStoreUploadResponse : IEquatable<CreateStoreUploadResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateStoreUploadResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateStoreUploadResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateStoreUploadResponse" /> class.
        /// </summary>
        /// <param name="uploadId">uploadId (required).</param>
        /// <param name="id">id (required).</param>
        /// <param name="files">files (required).</param>
        public CreateStoreUploadResponse(int uploadId = default(int), string id = default(string), List<UploadFileResponse> files = default(List<UploadFileResponse>))
        {
            this.UploadId = uploadId;
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for CreateStoreUploadResponse and cannot be null");
            }
            this.Id = id;
            // to ensure "files" is required (not null)
            if (files == null)
            {
                throw new ArgumentNullException("files is a required property for CreateStoreUploadResponse and cannot be null");
            }
            this.Files = files;
        }

        /// <summary>
        /// Gets or Sets UploadId
        /// </summary>
        [DataMember(Name = "uploadId", IsRequired = true, EmitDefaultValue = true)]
        public int UploadId { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Files
        /// </summary>
        [DataMember(Name = "files", IsRequired = true, EmitDefaultValue = true)]
        public List<UploadFileResponse> Files { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateStoreUploadResponse {\n");
            sb.Append("  UploadId: ").Append(UploadId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Files: ").Append(Files).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateStoreUploadResponse);
        }

        /// <summary>
        /// Returns true if CreateStoreUploadResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateStoreUploadResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateStoreUploadResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.UploadId == input.UploadId ||
                    this.UploadId.Equals(input.UploadId)
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Files == input.Files ||
                    this.Files != null &&
                    input.Files != null &&
                    this.Files.SequenceEqual(input.Files)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.UploadId.GetHashCode();
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Files != null)
                {
                    hashCode = (hashCode * 59) + this.Files.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
