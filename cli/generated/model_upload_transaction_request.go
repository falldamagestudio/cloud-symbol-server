/*
Cloud Symbol Store Uplaod API

This is the API that is used to upload symbols to Cloud Symbol Store

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// UploadTransactionRequest struct for UploadTransactionRequest
type UploadTransactionRequest struct {
	Description *string `json:"description,omitempty"`
	BuildId *string `json:"buildId,omitempty"`
	Files *[]UploadFileRequest `json:"files,omitempty"`
}

// NewUploadTransactionRequest instantiates a new UploadTransactionRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUploadTransactionRequest() *UploadTransactionRequest {
	this := UploadTransactionRequest{}
	return &this
}

// NewUploadTransactionRequestWithDefaults instantiates a new UploadTransactionRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUploadTransactionRequestWithDefaults() *UploadTransactionRequest {
	this := UploadTransactionRequest{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *UploadTransactionRequest) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UploadTransactionRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *UploadTransactionRequest) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *UploadTransactionRequest) SetDescription(v string) {
	o.Description = &v
}

// GetBuildId returns the BuildId field value if set, zero value otherwise.
func (o *UploadTransactionRequest) GetBuildId() string {
	if o == nil || o.BuildId == nil {
		var ret string
		return ret
	}
	return *o.BuildId
}

// GetBuildIdOk returns a tuple with the BuildId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UploadTransactionRequest) GetBuildIdOk() (*string, bool) {
	if o == nil || o.BuildId == nil {
		return nil, false
	}
	return o.BuildId, true
}

// HasBuildId returns a boolean if a field has been set.
func (o *UploadTransactionRequest) HasBuildId() bool {
	if o != nil && o.BuildId != nil {
		return true
	}

	return false
}

// SetBuildId gets a reference to the given string and assigns it to the BuildId field.
func (o *UploadTransactionRequest) SetBuildId(v string) {
	o.BuildId = &v
}

// GetFiles returns the Files field value if set, zero value otherwise.
func (o *UploadTransactionRequest) GetFiles() []UploadFileRequest {
	if o == nil || o.Files == nil {
		var ret []UploadFileRequest
		return ret
	}
	return *o.Files
}

// GetFilesOk returns a tuple with the Files field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UploadTransactionRequest) GetFilesOk() (*[]UploadFileRequest, bool) {
	if o == nil || o.Files == nil {
		return nil, false
	}
	return o.Files, true
}

// HasFiles returns a boolean if a field has been set.
func (o *UploadTransactionRequest) HasFiles() bool {
	if o != nil && o.Files != nil {
		return true
	}

	return false
}

// SetFiles gets a reference to the given []UploadFileRequest and assigns it to the Files field.
func (o *UploadTransactionRequest) SetFiles(v []UploadFileRequest) {
	o.Files = &v
}

func (o UploadTransactionRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.BuildId != nil {
		toSerialize["buildId"] = o.BuildId
	}
	if o.Files != nil {
		toSerialize["files"] = o.Files
	}
	return json.Marshal(toSerialize)
}

type NullableUploadTransactionRequest struct {
	value *UploadTransactionRequest
	isSet bool
}

func (v NullableUploadTransactionRequest) Get() *UploadTransactionRequest {
	return v.value
}

func (v *NullableUploadTransactionRequest) Set(val *UploadTransactionRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUploadTransactionRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUploadTransactionRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUploadTransactionRequest(val *UploadTransactionRequest) *NullableUploadTransactionRequest {
	return &NullableUploadTransactionRequest{value: val, isSet: true}
}

func (v NullableUploadTransactionRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUploadTransactionRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


